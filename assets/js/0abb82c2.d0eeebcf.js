"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[2787],{8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var t=r(6540);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}},8460:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"algorithmPractice/leetcode/22","title":"22 Generate Parentheses","description":"Leetcode","source":"@site/note/algorithmPractice/leetcode/22.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/22","permalink":"/note/algorithmPractice/leetcode/22","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":22,"frontMatter":{"sidebar_position":22},"sidebar":"tutorialSidebar","previous":{"title":"20 Valid Parentheses","permalink":"/note/algorithmPractice/leetcode/20"},"next":{"title":"23 Merge k Sorted Lists","permalink":"/note/algorithmPractice/leetcode/23"}}');var i=r(4848),s=r(8453);const a={sidebar_position:22},o="22 Generate Parentheses",c={},l=[];function d(e){const n={a:"a",br:"br",code:"code",h1:"h1",header:"header",hr:"hr",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"22-generate-parentheses",children:"22 Generate Parentheses"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/generate-parentheses/",children:"Leetcode"})}),"\n",(0,i.jsx)(n.p,{children:"Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses."}),"\n",(0,i.jsx)(n.p,{children:"Example 1:"}),"\n",(0,i.jsxs)(n.p,{children:["Input: n = 3",(0,i.jsx)(n.br,{}),"\n",'Output: ["((()))","(()())","(())()","()(())","()()()"]']}),"\n",(0,i.jsx)(n.p,{children:"Example 2:"}),"\n",(0,i.jsxs)(n.p,{children:["Input: n = 1",(0,i.jsx)(n.br,{}),"\n",'Output: ["()"]']}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"\u4e0d\u65ad\u9012\u5f52\u751f\u6210\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u62ec\u53f7\u3002\u9012\u5f52\u7684\u65f6\u5019\u4f20\u9012\u5269\u4f59\u5de6\u53f3\u62ec\u53f7\u6570\u91cf\uff0c\u5982\u679c\u5269\u4e0b\u7684\u5de6\u53f3\u62ec\u53f7\u6570\u91cf\u76f8\u7b49\uff0c\u5219\u5f53\u524d\u4f4d\u7f6e\u53ea\u80fd\u653e\u7f6e\u5de6\u62ec\u53f7\uff0c\u5426\u5219\u4e24\u8005\u90fd\u53ef\u4ee5\u3002\u76f4\u5230\u653e\u7f6e\u5b8c\u6bd5\u751f\u6210\u5b57\u7b26\u4e32\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public List<String> generateParenthesis(int n) {\n        char[] arr=new char[n << 1];\n        List<String> ret=new ArrayList<>();\n        recur(n,n,0,arr,ret);\n        return ret;\n    }\n    \n    private void recur(int open, int close, int index, \n                       char[] arr, List<String> ret){\n        if(index==arr.length){\n            ret.add(String.valueOf(arr));\n            return;\n        }\n        if(open==close){\n            arr[index]='(';\n            recur(open-1, close, index+1, arr, ret);\n        } else {\n            if(open>0){\n                arr[index]='(';\n                recur(open-1, close, index+1, arr, ret);\n            }\n            arr[index]=')';\n            recur(open, close-1, index+1, arr, ret);\n        }\n    }\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);