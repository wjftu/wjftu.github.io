"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[753],{3080:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"algorithmPractice/leetcode/435","title":"435 Non-overlapping Intervals","description":"Leetcode","source":"@site/note/algorithmPractice/leetcode/435.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/435","permalink":"/note/algorithmPractice/leetcode/435","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":435,"frontMatter":{"sidebar_position":435},"sidebar":"tutorialSidebar","previous":{"title":"413 Arithmetic Slices","permalink":"/note/algorithmPractice/leetcode/413"},"next":{"title":"438 Find All Anagrams in a String","permalink":"/note/algorithmPractice/leetcode/438"}}');var i=t(4848),a=t(8453);const o={sidebar_position:435},s="435 Non-overlapping Intervals",l={},c=[];function p(e){const n={a:"a",br:"br",code:"code",h1:"h1",header:"header",hr:"hr",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"435-non-overlapping-intervals",children:"435 Non-overlapping Intervals"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/non-overlapping-intervals/",children:"Leetcode"})}),"\n",(0,i.jsx)(n.p,{children:"Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping."}),"\n",(0,i.jsx)(n.p,{children:"Example 1:"}),"\n",(0,i.jsxs)(n.p,{children:["Input: intervals = [[1,2],[2,3],[3,4],[1,3]]",(0,i.jsx)(n.br,{}),"\n","Output: 1",(0,i.jsx)(n.br,{}),"\n","Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping."]}),"\n",(0,i.jsx)(n.p,{children:"Example 2:"}),"\n",(0,i.jsxs)(n.p,{children:["Input: intervals = [[1,2],[1,2],[1,2]]",(0,i.jsx)(n.br,{}),"\n","Output: 2",(0,i.jsx)(n.br,{}),"\n","Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping."]}),"\n",(0,i.jsx)(n.p,{children:"Example 3:"}),"\n",(0,i.jsxs)(n.p,{children:["Input: intervals = [[1,2],[2,3]]",(0,i.jsx)(n.br,{}),"\n","Output: 0",(0,i.jsx)(n.br,{}),"\n","Explanation: You don't need to remove any of the intervals since they're already non-overlapping."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"\u8d2a\u5fc3\u7b97\u6cd5\u3002\u7edf\u8ba1\u6700\u591a\u5269\u591a\u5c11\u4e2a\uff0c\u5373\u53ef\u8ba1\u7b97\u9700\u8981\u53bb\u6389\u591a\u5c11\u4e2a\u3002\u6309\u53f3\u8fb9\u754c\u6392\u5e8f\uff0c\u627e\u5230\u4e0b\u4e00\u4e2a\u53f3\u8fb9\u754c\u6700\u5c0f\u4e14\u4e0d\u4e0e\u5f53\u524d\u53f3\u8fb9\u754c\u91cd\u53e0\u7684\uff0c\u8ba1\u6570\u5e76\u66f4\u65b0\u53f3\u8fb9\u754c\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public int eraseOverlapIntervals(int[][] intervals) {\n    Arrays.sort(intervals,new Comparator<int[]>(){\n        public int compare(int[] arr1, int[] arr2){\n            return arr1[1]-arr2[1];\n        }\n    });\n    int count=1;\n    int right=intervals[0][1];\n    for(int i=1;i<intervals.length;++i){\n        if(intervals[i][0]>=right){\n            count++;\n            right=intervals[i][1];\n        }\n    }\n    return intervals.length-count;\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var r=t(6540);const i={},a=r.createContext(i);function o(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);