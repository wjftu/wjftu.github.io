"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[2515],{8453:(e,r,t)=>{t.d(r,{R:()=>a,x:()=>d});var n=t(6540);const i={},o=n.createContext(i);function a(e){const r=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(o.Provider,{value:r},e.children)}},8912:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>d,default:()=>u,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"algorithmPractice/leetcode/79","title":"79 Word Search","description":"Leetcode","source":"@site/note/algorithmPractice/leetcode/79.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/79","permalink":"/note/algorithmPractice/leetcode/79","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":79,"frontMatter":{"sidebar_position":79},"sidebar":"tutorialSidebar","previous":{"title":"78 Subsets","permalink":"/note/algorithmPractice/leetcode/78"},"next":{"title":"80 Remove Duplicates from Sorted Array II","permalink":"/note/algorithmPractice/leetcode/80"}}');var i=t(4848),o=t(8453);const a={sidebar_position:79},d="79 Word Search",s={},c=[];function l(e){const r={a:"a",br:"br",code:"code",h1:"h1",header:"header",hr:"hr",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"79-word-search",children:"79 Word Search"})}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.a,{href:"https://leetcode.com/problems/word-search/",children:"Leetcode"})}),"\n",(0,i.jsx)(r.p,{children:"Given an m x n grid of characters board and a string word, return true if word exists in the grid."}),"\n",(0,i.jsx)(r.p,{children:"The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once."}),"\n",(0,i.jsx)(r.p,{children:"Example 1:"}),"\n",(0,i.jsxs)(r.p,{children:['Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"',(0,i.jsx)(r.br,{}),"\n","Output: true"]}),"\n",(0,i.jsx)(r.p,{children:"Example 2:"}),"\n",(0,i.jsxs)(r.p,{children:['Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"',(0,i.jsx)(r.br,{}),"\n","Output: true"]}),"\n",(0,i.jsx)(r.p,{children:"Example 3:"}),"\n",(0,i.jsxs)(r.p,{children:['Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"',(0,i.jsx)(r.br,{}),"\n","Output: false"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.p,{children:"\u4f7f\u7528\u9012\u5f52\u6c42\u89e3\uff0c\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u5f53\u67d0\u4e2a\u5b57\u6bcd\u76f8\u540c\u65f6\uff0c\u5c1d\u8bd5\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u9012\u5f52\u4e0b\u4e00\u4e2a\u5b57\u6bcd\u3002"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"class Solution {\n    public boolean exist(char[][] board, String word) {\n        \n        boolean[][] visited=new boolean[board.length][board[0].length];\n        char first=word.charAt(0);\n        for(int i=0;i<board.length;++i){\n            for(int j=0;j<board[0].length;++j){\n                if(recur(board,word,0,i,j,visited)) return true;\n            }\n        }\n        return false;\n    }\n    \n    private boolean recur(char[][] board, String word, int index, \n                          int i, int j, boolean[][]visited){\n        \n        \n        if(word.charAt(index)!=board[i][j]) return false;\n        if(index+1==word.length()) return true;\n        visited[i][j]=true;\n        if(i-1>=0 && !visited[i-1][j] && recur(board,word,index+1,i-1,j,visited)) return true;\n        if(i+1<board.length && !visited[i+1][j] && recur(board,word,index+1,i+1,j,visited)) return true;\n        if(j-1>=0 && !visited[i][j-1] && recur(board,word,index+1,i,j-1,visited)) return true;\n        if(j+1<board[i].length && !visited[i][j+1] && recur(board,word,index+1,i,j+1,visited)) return true;\n        visited[i][j]=false;\n        return false;\n    }\n}\n"})})]})}function u(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);