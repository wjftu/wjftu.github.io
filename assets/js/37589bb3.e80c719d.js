"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[9042],{8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>o});var r=t(6540);const i={},a=r.createContext(i);function s(n){const e=r.useContext(a);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),r.createElement(a.Provider,{value:e},n.children)}},8989:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"algorithmPractice/leetcode/1","title":"1 Two Sum","description":"LeetCode","source":"@site/note/algorithmPractice/leetcode/1.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/1","permalink":"/note/algorithmPractice/leetcode/1","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Tree","permalink":"/note/algorithmPractice/leetcode/tree"},"next":{"title":"2 Add Two Numbers","permalink":"/note/algorithmPractice/leetcode/2"}}');var i=t(4848),a=t(8453);const s={sidebar_position:1},o="1 Two Sum",c={},l=[];function u(n){const e={a:"a",code:"code",h1:"h1",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"1-two-sum",children:"1 Two Sum"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://leetcode.com/problems/two-sum/",children:"LeetCode"})}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"Two Sum"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target."}),"\n",(0,i.jsx)(e.p,{children:"You may assume that each input would have exactly one solution, and you may not use the same element twice."}),"\n",(0,i.jsx)(e.p,{children:"You can return the answer in any order."}),"\n",(0,i.jsx)(e.p,{children:"Example 1:"}),"\n",(0,i.jsx)(e.p,{children:"Input: nums = [2,7,11,15], target = 9\r\nOutput: [0,1]\r\nOutput: Because nums[0] + nums[1] == 9, we return [0, 1]."}),"\n",(0,i.jsx)(e.p,{children:"Example 2:"}),"\n",(0,i.jsx)(e.p,{children:"Input: nums = [3,2,4], target = 6\r\nOutput: [1,2]"}),"\n",(0,i.jsx)(e.p,{children:"Example 3:"}),"\n",(0,i.jsx)(e.p,{children:"Input: nums = [3,3], target = 6\r\nOutput: [0,1]"}),"\n",(0,i.jsx)(e.p,{children:"Constraints:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"2 <= nums.length <= 104\r\n-109 <= nums[i] <= 109\r\n-109 <= target <= 109\r\nOnly one valid answer exists.\n"})}),"\n",(0,i.jsx)(e.p,{children:"Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?"}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsxs)(e.p,{children:["\u5982\u679c\u65e0\u89c6\u6bcf\u4e2a\u5143\u7d20\u53ea\u80fd\u8bbf\u95ee2\u6b21\u7684\u89c4\u5219\uff0c\u5199\u65f6\u95f4\u590d\u6742\u5ea6 O(n",(0,i.jsx)("sup",{children:"2"}),") \u7684\u4ee3\u7801\u5f88\u7b80\u5355\uff0c\u53cc\u5c42\u5faa\u73af\u5373\u53ef\uff1a"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"class Solution {\r\n    public int[] twoSum(int[] nums, int target) {\r\n        int[] ret=new int[2];\r\n        outter:for(int i=0;i<nums.length-1;++i){\r\n            for(int j=i+1;j<nums.length;++j){\r\n                if(nums[i]+nums[j]==target){\r\n                    ret[0]=i;\r\n                    ret[1]=j;\r\n                    break outter;\r\n                } \r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"\u63a5\u4e0b\u6765\u662f O(n) \u7684\u65b9\u6cd5\uff0c\u5efa\u4e00\u4e2a HashMap \u3002\u5148\u904d\u5386\u4e00\u904d\uff0c\u50a8\u5b58\u6bcf\u4e2a\u5143\u7d20\u7684\u548c target \u7684\u5dee\u503c\u548c\u4e0b\u6807\uff08\u952e\u662f\u6bcf\u4e2a\u5143\u7d20\u4e0e target \u7684\u5dee\uff0c\u503c\u662f\u4e0b\u6807\uff09\u3002\u5728\u904d\u5386\u4e00\u904d\uff0c\u5982\u679c\u4e00\u4e2a\u5143\u7d20\u503c\u548c\u67d0\u4e2a\u5143\u7d20\u4e0e target \u7684\u5dee\u76f8\u7b49\uff0c\u4e14\u4e0b\u6807\u4e0e\u90a3\u4e2a\u5143\u7d20\u4e0d\u4e00\u6837\uff0c\u5219\u8bf4\u660e\u662f\u8981\u627e\u7684\u5143\u7d20\u3002"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"class Solution {\r\n    public int[] twoSum(int[] nums, int target) {\r\n        HashMap<Integer,Integer> map=new HashMap<>();\r\n        int t;\r\n        int[] ret=new int[2];\r\n        for(int i=0;i<nums.length;++i){\r\n            map.put(target-nums[i],i);\r\n        }\r\n        for(int i=0;i<nums.length;++i){\r\n            t=nums[i];\r\n            if(map.containsKey(t) && map.get(t)!=i){\r\n                ret[0] = i;\r\n                ret[1] = map.get(t);\r\n                break;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"\u4e0d\u8fc7\u8fd8\u4e0d\u662f\u6700\u4f18\u89e3\uff0c\u5176\u5b9e\u53ef\u4ee5\u53ea\u904d\u5386\u4e00\u6b21\uff0c\u6bcf\u6b21\u63d2\u5165 map \u524d\u68c0\u67e5 map \u662f\u5426\u6709\u5143\u7d20\u4e0e\u4e4b\u548c\u4e3a target"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"class Solution {\r\n    public int[] twoSum(int[] nums, int target) {\r\n        HashMap<Integer,Integer> map=new HashMap<>();\r\n        int[] ret=new int[2];\r\n        for(int i=0;i<nums.length;++i){\r\n            if(map.containsKey(nums[i])){\r\n                ret[0]=i;\r\n                ret[1]=map.get(nums[i]);\r\n                break;\r\n            }\r\n            map.put(target-nums[i],i);\r\n        }\r\n        return ret;\r\n    }\r\n}\n"})})]})}function m(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(u,{...n})}):u(n)}}}]);