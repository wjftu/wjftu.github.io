"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[5088],{6405:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"algorithmPractice/leetcode/141","title":"141 Linked List Cycle","description":"Leetcode","source":"@site/note/algorithmPractice/leetcode/141.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/141","permalink":"/note/algorithmPractice/leetcode/141","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":141,"frontMatter":{"sidebar_position":141},"sidebar":"tutorialSidebar","previous":{"title":"138 Copy List with Random Pointer","permalink":"/note/algorithmPractice/leetcode/138"},"next":{"title":"142 Linked List Cycle II","permalink":"/note/algorithmPractice/leetcode/142"}}');var i=t(4848),s=t(8453);const a={sidebar_position:141},r="141 Linked List Cycle",o={},c=[];function d(e){const n={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"141-linked-list-cycle",children:"141 Linked List Cycle"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/linked-list-cycle/",children:"Leetcode"})}),"\n",(0,i.jsx)(n.p,{children:"Given head, the head of a linked list, determine if the linked list has a cycle in it."}),"\n",(0,i.jsx)(n.p,{children:"There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter."}),"\n",(0,i.jsx)(n.p,{children:"Return true if there is a cycle in the linked list. Otherwise, return false."}),"\n",(0,i.jsx)(n.p,{children:"\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u4e00\u6b21\u8d70 2 \u6b65\uff0c\u4e00\u4e2a\u4e00\u6b21\u8d70 1 \u6b65\uff0c\u5982\u679c\u5feb\u7684\u8d70\u5230\u5934\uff0c\u8bf4\u660e\u6ca1\u6709\u73af\uff0c\u6709\u73af\u4e24\u4e2a\u6307\u9488\u5fc5\u7136\u76f8\u9047\uff0c\u5982\u679c\u76f8\u9047\u8bf4\u660e\u6709\u73af\u3002\u65f6\u95f4\u590d\u6742\u5ea6 o(n) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 o(1)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public boolean hasCycle(ListNode head) {\n    if(head==null) return false;\n    ListNode l1=head, l2=head;\n    while(l2!=null && l2.next!=null){\n        l2=l2.next.next;\n        l1=l1.next;\n        if(l2==l1) return true;\n    }\n    return false;\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        if(head==NULL) return false;\n        ListNode * l1=head; \n        ListNode * l2=head;\n        while(l2!=NULL && l2->next!=NULL){\n            l2=l2->next->next;\n            l1=l1->next;\n            if(l1==l2) return true;\n        }\n        return false;\n    }\n};\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: Optional[ListNode]) -> bool:\n        if head is None:\n            return False;\n        p1=head\n        p2=head\n        while p2 and p2.next:\n            p2=p2.next.next\n            p1=p1.next\n            if p1 is p2:\n                return True\n        return False\n        \n"})}),"\n",(0,i.jsx)(n.p,{children:"\u8fd9\u9053\u9898\u6709\u4eba\u627e\u5230\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u94fe\u8868\u7684\u6700\u5927\u957f\u5ea6\uff0c\u7136\u540e\u9762\u5411\u6d4b\u8bd5\u7528\u4f8b\u7f16\u7a0b\u3002\u3002\u3002"}),"\n",(0,i.jsx)(n.p,{children:"(\u6d4b\u8bd5\u7528\u4f8b\u662f\u4f1a\u53d8\u7684\uff0c\u73b0\u5728\u5df2\u7ecf\u6269\u5145\u5230 10000)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class Solution {\n    public boolean hasCycle(ListNode head) {\n        \n        int count = 8029;\n\n        while( head != null && count > 0){\n\n            head = head.next;\n\n            count--;\n        }\n\n        if( head == null ) return false;\n\n        return true;\n\n    }\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var l=t(6540);const i={},s=l.createContext(i);function a(e){const n=l.useContext(s);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),l.createElement(s.Provider,{value:n},e.children)}}}]);