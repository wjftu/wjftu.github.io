"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[2342],{8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>d});var t=r(6540);const i={},a=t.createContext(i);function s(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(a.Provider,{value:n},e.children)}},9870:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>x,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"algorithmPractice/leetcode/17","title":"17 Letter Combinations of a Phone Number","description":"Leetcode","source":"@site/note/algorithmPractice/leetcode/17.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/17","permalink":"/note/algorithmPractice/leetcode/17","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":17,"frontMatter":{"sidebar_position":17},"sidebar":"tutorialSidebar","previous":{"title":"16 3Sum Closest","permalink":"/note/algorithmPractice/leetcode/16"},"next":{"title":"18 4Sum","permalink":"/note/algorithmPractice/leetcode/18"}}');var i=r(4848),a=r(8453);const s={sidebar_position:17},d="17 Letter Combinations of a Phone Number",l={},c=[];function o(e){const n={a:"a",br:"br",code:"code",h1:"h1",header:"header",hr:"hr",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"17-letter-combinations-of-a-phone-number",children:"17 Letter Combinations of a Phone Number"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/letter-combinations-of-a-phone-number/",children:"Leetcode"})}),"\n",(0,i.jsx)(n.p,{children:"Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order."}),"\n",(0,i.jsx)(n.p,{children:"A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters."}),"\n",(0,i.jsx)(n.p,{children:"Example 1:"}),"\n",(0,i.jsxs)(n.p,{children:['Input: digits = "23"',(0,i.jsx)(n.br,{}),"\n",'Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]']}),"\n",(0,i.jsx)(n.p,{children:"Example 2:"}),"\n",(0,i.jsxs)(n.p,{children:['Input: digits = ""',(0,i.jsx)(n.br,{}),"\n","Output: []"]}),"\n",(0,i.jsx)(n.p,{children:"Example 3:"}),"\n",(0,i.jsxs)(n.p,{children:['Input: digits = "2"',(0,i.jsx)(n.br,{}),"\n",'Output: ["a","b","c"]']}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"\u4f7f\u7528\u9012\u5f52\u5b9e\u73b0"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public List<String> letterCombinations(String digits) {\n        List<String> ret=new ArrayList<>();\n        if(digits==null || digits.length()==0){\n            return ret;\n        } \n        char[][] map=new char[10][];\n        map[2]=new char[]{'a','b','c'};\n        map[3]=new char[]{'d','e','f'};\n        map[4]=new char[]{'g','h','i'};\n        map[5]=new char[]{'j','k','l'};\n        map[6]=new char[]{'m','n','o'};\n        map[7]=new char[]{'p','q','r','s'};\n        map[8]=new char[]{'t','u','v'};\n        map[9]=new char[]{'w','x','y','z'};\n        char[] arr=new char[digits.length()];\n        \n        recur(digits,0,map,ret,arr);\n        return ret;\n    }\n    \n    private void recur(String digits, int index, char[][] map, \n                       List<String> ret, char[] arr){\n        if(index==arr.length){\n            ret.add(String.valueOf(arr));\n            return;\n        }\n        char cur=digits.charAt(index);\n        for(char c:map[cur-'0']){\n            arr[index]=c;\n            recur(digits, index+1, map, ret, arr);\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public List<String> letterCombinations(String digits) {\n        List<String> list = new ArrayList<>();\n        if(digits==null || \"\".equals(digits)) return list;\n        char[] arr=new char[digits.length()];\n        letter(digits,0,arr,list);\n        return list;\n    }\n    \n    private void letter(String digits, int index, char[] arr, List<String> list){\n        if(index==arr.length) {\n            list.add(String.valueOf(arr));\n            return ;\n        }\n        \n        char c=digits.charAt(index);\n        \n        if('2'==c){\n            arr[index]='a';\n            letter(digits, index+1, arr, list);\n            arr[index]='b';\n            letter(digits, index+1, arr, list);\n            arr[index]='c';\n            letter(digits, index+1, arr, list);\n        } else if ('3'==c){\n            arr[index]='d';\n            letter(digits, index+1, arr, list);\n            arr[index]='e';\n            letter(digits, index+1, arr, list);\n            arr[index]='f';\n            letter(digits, index+1, arr, list);\n        } else if ('4'==c){\n            arr[index]='g';\n            letter(digits, index+1, arr, list);\n            arr[index]='h';\n            letter(digits, index+1, arr, list);\n            arr[index]='i';\n            letter(digits, index+1, arr, list);\n        } else if ('5'==c){\n            arr[index]='j';\n            letter(digits, index+1, arr, list);\n            arr[index]='k';\n            letter(digits, index+1, arr, list);\n            arr[index]='l';\n            letter(digits, index+1, arr, list);\n        } else if ('6'==c){\n            arr[index]='m';\n            letter(digits, index+1, arr, list);\n            arr[index]='n';\n            letter(digits, index+1, arr, list);\n            arr[index]='o';\n            letter(digits, index+1, arr, list);\n        } else if ('7'==c){\n            arr[index]='p';\n            letter(digits, index+1, arr, list);\n            arr[index]='q';\n            letter(digits, index+1, arr, list);\n            arr[index]='r';\n            letter(digits, index+1, arr, list);\n            arr[index]='s';\n            letter(digits, index+1, arr, list);\n        } else if ('8'==c){\n            arr[index]='t';\n            letter(digits, index+1, arr, list);\n            arr[index]='u';\n            letter(digits, index+1, arr, list);\n            arr[index]='v';\n            letter(digits, index+1, arr, list);\n        } else if ('9'==c){\n            arr[index]='w';\n            letter(digits, index+1, arr, list);\n            arr[index]='x';\n            letter(digits, index+1, arr, list);\n            arr[index]='y';\n            letter(digits, index+1, arr, list);\n            arr[index]='z';\n            letter(digits, index+1, arr, list);\n        } \n    }\n}\n"})})]})}function x(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}}}]);