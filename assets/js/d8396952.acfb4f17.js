"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[6397],{326:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"algorithmPractice/leetcode/547","title":"547 Number of Provinces","description":"Leetcode","source":"@site/note/algorithmPractice/leetcode/547.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/547","permalink":"/note/algorithmPractice/leetcode/547","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":547,"frontMatter":{"sidebar_position":547},"sidebar":"tutorialSidebar","previous":{"title":"543 Diameter of Binary Tree","permalink":"/note/algorithmPractice/leetcode/543"},"next":{"title":"560 Subarray Sum Equals K","permalink":"/note/algorithmPractice/leetcode/560"}}');var r=t(4848),o=t(8453);const c={sidebar_position:547},s="547 Number of Provinces",d={},a=[];function l(e){const n={a:"a",br:"br",code:"code",h1:"h1",header:"header",hr:"hr",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"547-number-of-provinces",children:"547 Number of Provinces"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/number-of-provinces/",children:"Leetcode"})}),"\n",(0,r.jsx)(n.p,{children:"There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c."}),"\n",(0,r.jsx)(n.p,{children:"A province is a group of directly or indirectly connected cities and no other cities outside of the group."}),"\n",(0,r.jsx)(n.p,{children:"You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise."}),"\n",(0,r.jsx)(n.p,{children:"Return the total number of provinces."}),"\n",(0,r.jsx)(n.p,{children:"Example 1:"}),"\n",(0,r.jsxs)(n.p,{children:["Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]",(0,r.jsx)(n.br,{}),"\n","Output: 2"]}),"\n",(0,r.jsx)(n.p,{children:"Example 2:"}),"\n",(0,r.jsxs)(n.p,{children:["Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]",(0,r.jsx)(n.br,{}),"\n","Output: 3"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"\u904d\u5386\u6240\u6709\u7684\u57ce\u5e02\uff0c\u9047\u5230\u672a\u6807\u8bb0\u7684\u57ce\u5e02\u5c31\u5bf9\u5176\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u6216\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u6807\u8bb0\u6240\u6709\u7684\u57ce\u5e02\uff0c\u8fd9\u4e9b\u662f\u540c\u4e00\u4e2a\u7701\uff0c\u8bb0\u5f55\u7701\u6570\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public int findCircleNum(int[][] isConnected) {\n        boolean[] visited=new boolean[isConnected.length];\n        int count=0;\n        for(int i=0;i<isConnected.length;++i){\n            if(!visited[i]){\n                count++;\n                dfs(i, isConnected, visited);\n            }\n        }\n        return count;\n    }\n    \n    private void dfs(int i, int[][] isConnected, boolean[] visited){\n        visited[i]=true;\n        int[] arr=isConnected[i];\n        for(int j=0;j<arr.length;++j){\n            if(!visited[j] && arr[j]==1) dfs(j, isConnected, visited);\n        }\n    }\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>s});var i=t(6540);const r={},o=i.createContext(r);function c(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);