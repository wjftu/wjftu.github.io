"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[5148],{8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(6540);const l={},i=r.createContext(l);function s(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),r.createElement(i.Provider,{value:n},e.children)}},9161:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"algorithmPractice/leetcode/2","title":"2 Add Two Numbers","description":"LeetCode","source":"@site/note/algorithmPractice/leetcode/2.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/2","permalink":"/note/algorithmPractice/leetcode/2","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"1 Two Sum","permalink":"/note/algorithmPractice/leetcode/1"},"next":{"title":"3 Longest Substring Without Repeating Characters","permalink":"/note/algorithmPractice/leetcode/3"}}');var l=t(4848),i=t(8453);const s={sidebar_position:2},a="2 Add Two Numbers",o={},d=[];function c(e){const n={a:"a",code:"code",h1:"h1",header:"header",hr:"hr",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"2-add-two-numbers",children:"2 Add Two Numbers"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://leetcode.com/problems/add-two-numbers/",children:"LeetCode"})}),"\n",(0,l.jsx)(n.p,{children:"You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list."}),"\n",(0,l.jsx)(n.p,{children:"You may assume the two numbers do not contain any leading zero, except the number 0 itself."}),"\n",(0,l.jsx)(n.p,{children:"Example 1:"}),"\n",(0,l.jsx)(n.p,{children:"Input: l1 = [2,4,3], l2 = [5,6,4]\r\nOutput: [7,0,8]\r\nExplanation: 342 + 465 = 807."}),"\n",(0,l.jsx)(n.p,{children:"Example 2:"}),"\n",(0,l.jsx)(n.p,{children:"Input: l1 = [0], l2 = [0]\r\nOutput: [0]"}),"\n",(0,l.jsx)(n.p,{children:"Example 3:"}),"\n",(0,l.jsx)(n.p,{children:"Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\r\nOutput: [8,9,9,9,0,0,0,1]"}),"\n",(0,l.jsx)(n.p,{children:"Constraints:"}),"\n",(0,l.jsxs)(n.p,{children:["The number of nodes in each linked list is in the range [1, 100].\r\n",(0,l.jsx)(n.code,{children:"0 <= Node.val <= 9"}),"\r\nIt is guaranteed that the list represents a number that does not have leading zeros."]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode() {}\r\n *     ListNode(int val) { this.val = val; }\r\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\r\n * }\r\n */\r\nclass Solution {\r\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\r\n        ListNode ret,p;\r\n        int carry=0;\r\n        ret=new ListNode((l1.val+l2.val)%10);\r\n        p=ret;\r\n        carry=(l1.val+l2.val)/10;\r\n        l1=l1.next; l2=l2.next;\r\n        while(l1!=null && l2!=null){\r\n            p.next=new ListNode((l1.val+l2.val+carry)%10);\r\n            p=p.next;\r\n            carry=(l1.val+l2.val+carry)/10;\r\n            l1=l1.next; l2=l2.next;\r\n        }\r\n        while(l1!=null){\r\n            p.next=new ListNode((l1.val+carry)%10);\r\n            p=p.next;\r\n            carry=(l1.val+carry)/10;\r\n            l1=l1.next;\r\n        }\r\n        while(l2!=null){\r\n            p.next=new ListNode((l2.val+carry)%10);\r\n            p=p.next;\r\n            carry=(l2.val+carry)/10;\r\n            l2=l2.next;\r\n        }\r\n        if(carry==1)\r\n            p.next=new ListNode(1);\r\n        return ret;\r\n    }\r\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}}}]);