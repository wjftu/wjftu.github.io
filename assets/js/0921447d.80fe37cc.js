"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[8984],{2231:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>s});const t=JSON.parse('{"id":"algorithmPractice/leetcode/104","title":"104 Maximum Depth of Binary Tree","description":"LeetCode","source":"@site/note/algorithmPractice/leetcode/104.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/104","permalink":"/note/algorithmPractice/leetcode/104","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":104,"frontMatter":{"sidebar_position":104},"sidebar":"tutorialSidebar","previous":{"title":"100 Same Tree","permalink":"/note/algorithmPractice/leetcode/100"},"next":{"title":"110 Balanced Binary Tree","permalink":"/note/algorithmPractice/leetcode/110"}}');var o=n(4848),i=n(8453);const a={sidebar_position:104},l="104 Maximum Depth of Binary Tree",c={},s=[];function d(e){const r={a:"a",code:"code",h1:"h1",header:"header",hr:"hr",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"104-maximum-depth-of-binary-tree",children:"104 Maximum Depth of Binary Tree"})}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.a,{href:"https://leetcode.com/problems/maximum-depth-of-binary-tree/",children:"LeetCode"})}),"\n",(0,o.jsx)(r.p,{children:"Given the root of a binary tree, return its maximum depth."}),"\n",(0,o.jsx)(r.p,{children:"A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node."}),"\n",(0,o.jsx)(r.p,{children:"Example 1:"}),"\n",(0,o.jsx)(r.p,{children:"Input: root = [3,9,20,null,null,15,7]\r\nOutput: 3"}),"\n",(0,o.jsx)(r.p,{children:"Example 2:"}),"\n",(0,o.jsx)(r.p,{children:"Input: root = [1,null,2]\r\nOutput: 2"}),"\n",(0,o.jsx)(r.p,{children:"Example 3:"}),"\n",(0,o.jsx)(r.p,{children:"Input: root = []\r\nOutput: 0"}),"\n",(0,o.jsx)(r.p,{children:"Example 4:"}),"\n",(0,o.jsx)(r.p,{children:"Input: root = [0]\r\nOutput: 1"}),"\n",(0,o.jsx)(r.p,{children:"Constraints:"}),"\n",(0,o.jsxs)(r.p,{children:["The number of nodes in the tree is in the range [0, 104].\r\n",(0,o.jsx)(r.code,{children:"-100 <= Node.val <= 100"})]}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsx)(r.p,{children:"\u524d\u5e8f\u904d\u5386\uff0c\u6bcf\u5411\u4e0b\u4e00\u5c42\u6df1\u5ea6+1\uff0c\u5411\u4e0a\u4e00\u5c42\u6df1\u5ea6-1\uff0c\u53d6\u6700\u5927\u6df1\u5ea6"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:"class Solution {\r\n    int max=0,cur=0;\r\n    public int maxDepth(TreeNode root) {\r\n        if(root==null) return 0;\r\n        preOrder(root);\r\n        return max;\r\n    }\r\n    \r\n    private void preOrder(TreeNode t){\r\n        ++cur;\r\n        max=Math.max(max,cur);\r\n        if(t.left!=null){\r\n            preOrder(t.left);\r\n        }\r\n        if(t.right!=null){\r\n            preOrder(t.right);\r\n        }\r\n        --cur;\r\n    }\r\n}\n"})}),"\n",(0,o.jsx)(r.p,{children:"\u5176\u5b9e\u8fd8\u6709\u66f4\u7b80\u6d01\u7684\u5199\u6cd5\uff0c\u6bcf\u4e2a\u8282\u70b9\u4e0b\u9762\u7684\u6700\u5927\u6df1\u5ea6\uff0c\u662f\u5de6\u53f3\u5b50\u6811\u7684\u6700\u5927\u6df1\u5ea6"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:"class Solution {\r\n    public int maxDepth(TreeNode root) {\r\n        if(root==null) return 0;\r\n        return Math.max(maxDepth(root.left),maxDepth(root.right))+1;\r\n    }\r\n}\n"})})]})}function p(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>l});var t=n(6540);const o={},i=t.createContext(o);function a(e){const r=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);