"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[5059],{8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>s});var i=r(6540);const t={},a=i.createContext(t);function o(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(a.Provider,{value:n},e.children)}},8596:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"algorithmPractice/leetcode/graph","title":"Graph","description":"133 Clone Graph","source":"@site/note/algorithmPractice/leetcode/graph.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/graph","permalink":"/note/algorithmPractice/leetcode/graph","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":-1,"frontMatter":{"sidebar_position":-1},"sidebar":"tutorialSidebar","previous":{"title":"Dynamic Programming","permalink":"/note/algorithmPractice/leetcode/dynamic_programming"},"next":{"title":"Hash Table","permalink":"/note/algorithmPractice/leetcode/hashtable"}}');var t=r(4848),a=r(8453);const o={sidebar_position:-1},s="Graph",d={},c=[{value:"133 Clone Graph",id:"133-clone-graph",level:3},{value:"200 Number of Islands",id:"200-number-of-islands",level:3},{value:"207 Course Schedule",id:"207-course-schedule",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"graph",children:"Graph"})}),"\n",(0,t.jsx)(n.h3,{id:"133-clone-graph",children:(0,t.jsx)(n.a,{href:"133",children:"133 Clone Graph"})}),"\n",(0,t.jsx)(n.p,{children:"Given a reference of a node in a connected undirected graph."}),"\n",(0,t.jsx)(n.p,{children:"Return a deep copy (clone) of the graph."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public Node cloneGraph(Node node) {\n        if(node==null) return null;\n        HashMap<Node, Node> map = new HashMap<>();\n        Queue<Node> queue = new LinkedList<>();\n        map.put(node, new Node(node.val));\n        queue.add(node);\n        while(!queue.isEmpty()){\n            Node old = queue.poll();\n            Node copy = map.get(old);\n            for(Node n: old.neighbors){\n                if(!map.containsKey(n)){\n                    map.put(n, new Node(n.val));\n                    queue.add(n);\n                }\n                copy.neighbors.add(map.get(n));\n            }\n        }\n        return map.get(node);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"200-number-of-islands",children:(0,t.jsx)(n.a,{href:"200",children:"200 Number of Islands"})}),"\n",(0,t.jsx)(n.p,{children:"Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public int numIslands(char[][] grid) {\n        int count=0;\n        for(int i=0;i<grid.length;++i){\n            for(int j=0;j<grid[0].length;++j){\n                if(grid[i][j]=='1') {\n                    remove(grid, i, j);\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    \n    private void remove(char[][] grid, int i, int j){\n        grid[i][j]='0';\n        if(i+1<grid.length && grid[i+1][j]=='1') remove(grid, i+1, j);\n        if(i-1>=0 && grid[i-1][j]=='1') remove(grid, i-1, j);\n        if(j+1<grid[0].length && grid[i][j+1]=='1') remove(grid, i, j+1);\n        if(j-1>=0 && grid[i][j-1]=='1') remove(grid, i, j-1);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"207-course-schedule",children:(0,t.jsx)(n.a,{href:"207",children:"207 Course Schedule"})}),"\n",(0,t.jsx)(n.p,{children:"There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public boolean canFinish(int numCourses, int[][] prerequisites) {\n        // 0-unknown 1-visiting 2-visited\n        int[] visited=new int[numCourses];\n        ArrayList<Integer>[] graph=new ArrayList[numCourses];\n        for(int i=0;i<numCourses;++i){\n            graph[i]=new ArrayList<>();\n        }\n        \n        for(int[] arr:prerequisites){\n            graph[arr[0]].add(arr[1]);\n        }\n        \n        for(int i=0;i<numCourses;++i){\n            if(dfs(i, visited, graph)) return false;\n        }\n        return true;\n    }\n    // true-has circle\n    private boolean dfs(int cur, int[] visited, ArrayList<Integer>[] graph){\n        if(visited[cur]==1) return true;\n        if(visited[cur]==2) return false;\n        visited[cur]=1;\n        for(int i:graph[cur]){\n            if(dfs(i, visited, graph)) return true;\n        }\n        visited[cur]=2;\n        return false;\n    }\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);