"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[8889],{8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var i=n(6540);const r={},s=i.createContext(r);function a(e){const t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:t},e.children)}},8948:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"algorithmPractice/leetcode/847","title":"847 Shortest Path Visiting All Nodes","description":"Leetcode","source":"@site/note/algorithmPractice/leetcode/847.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/847","permalink":"/note/algorithmPractice/leetcode/847","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":847,"frontMatter":{"sidebar_position":847},"sidebar":"tutorialSidebar","previous":{"title":"844 Backspace String Compare","permalink":"/note/algorithmPractice/leetcode/844"},"next":{"title":"946 Validate Stack Sequences","permalink":"/note/algorithmPractice/leetcode/946"}}');var r=n(4848),s=n(8453);const a={sidebar_position:847},o="847 Shortest Path Visiting All Nodes",l={},c=[];function d(e){const t={a:"a",br:"br",code:"code",h1:"h1",header:"header",hr:"hr",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"847-shortest-path-visiting-all-nodes",children:"847 Shortest Path Visiting All Nodes"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://leetcode.com/problems/shortest-path-visiting-all-nodes/",children:"Leetcode"})}),"\n",(0,r.jsx)(t.p,{children:"You have an undirected, connected graph of n nodes labeled from 0 to n - 1. You are given an array graph where graph[i] is a list of all the nodes connected with node i by an edge."}),"\n",(0,r.jsx)(t.p,{children:"Return the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges."}),"\n",(0,r.jsx)(t.p,{children:"Example 1:"}),"\n",(0,r.jsxs)(t.p,{children:["Input: graph = [[1,2,3],[0],[0],[0]]",(0,r.jsx)(t.br,{}),"\n","Output: 4",(0,r.jsx)(t.br,{}),"\n","Explanation: One possible path is [1,0,2,0,3]"]}),"\n",(0,r.jsx)(t.p,{children:"Example 2:"}),"\n",(0,r.jsxs)(t.p,{children:["Input: graph = [[1],[0,2,4],[1,3,4],[2],[1,2]]",(0,r.jsx)(t.br,{}),"\n","Output: 4",(0,r.jsx)(t.br,{}),"\n","Explanation: One possible path is [0,1,4,2,3]"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.p,{children:"\u597d\u96be\u554a\uff01\u8981\u904d\u5386\u6240\u6709\u7684\u70b9\uff0c\u6709\u4e9b\u70b9\u4e0d\u5f97\u4e0d\u904d\u5386\u591a\u6b21\uff0c\u53c8\u4e0d\u80fd\u6709\u65e0\u7528\u7684\u6b65\u9aa4\u3002\u4f7f\u7528\u4e00\u4e2a\u8d85\u5927\u77e9\u9635\u5b58\u653e\u8d70\u8fc7\u7684\u6b65\u9aa4\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u8868\u793a\u4ece\u54ea\u4e2a\u70b9\u5f00\u59cb\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u8868\u793a\u8d70\u4e4b\u540e\u7684\u72b6\u6001\uff0c\u5982\u679c\u4e00\u4e2a\u72b6\u6001\u5b58\u5728\u8fc7\uff0c\u8bf4\u660e\u8fd9\u4e00\u6b65\u662f\u65e0\u7528\u7684\u3002\u7531\u4e8e\u6700\u5927\u53ea\u6709 12 \u4e2a\u70b9\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u6574\u6570\u8868\u793a\u72b6\u6001\uff0c\u4f7f\u7528\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6574\u6570\uff0c\u5982\u679c\u67d0\u4e00\u4f4d\u4e3a 1 \uff0c\u8868\u793a\u8fd9\u4e2a\u70b9\u904d\u5386\u8fc7\uff0c\u4f8b\u5982 11010 \u8868\u793a\u7b2c 2,4,5 \u4e2a\u70b9\u904d\u5386\u8fc7\uff0c\u5b8c\u6210\u65f6\u7684\u72b6\u6001\u4e3a\u6bcf\u4e00\u4f4d\u90fd\u662f 1 \u3002\u5bf9\u6bcf\u4e2a\u70b9\u8fdb\u884c bfs \uff0c\u5c06\u65b0\u7684\u6ca1\u6709\u8d70\u8fc7\u7684\u70b9\u548c\u72b6\u6001\u52a0\u5165\u961f\u5217\u3002\u5f53\u5b8c\u6210\u7684\u72b6\u6001\u51fa\u73b0\u65f6\uff0c\u8fd4\u56de\u6b65\u6570\u3002"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"public int shortestPathLength(int[][] graph) {\n    \n    int len = graph.length;\n    int finished = (1 << len) -1;\n    int step = 0;\n    boolean[][] visited = new boolean[len][1<<len];\n    Queue<int[]> queue = new LinkedList<>();\n    for(int i=0;i<len;++i){\n        queue.add(new int[]{i, 1<<i});\n    }\n    while(!queue.isEmpty()){\n        int size=queue.size();\n        for(int i=0;i<size;++i){\n            int[] pair = queue.poll();\n            if(finished == pair[1]) return step;\n            for(int next: graph[pair[0]]){\n                int nextState = pair[1] | (1<<next);\n                if(visited[next][nextState]) continue;\n                queue.add(new int[]{next, nextState});\n                visited[next][nextState] = true;\n            }\n        }\n        step++;\n    }\n    return step;\n}\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);