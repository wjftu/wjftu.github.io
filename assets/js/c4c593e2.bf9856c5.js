"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[899],{2532:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"algorithmPractice/leetcode/39","title":"39 Combination Sum","description":"Leetcode","source":"@site/note/algorithmPractice/leetcode/39.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/39","permalink":"/note/algorithmPractice/leetcode/39","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":39,"frontMatter":{"sidebar_position":39},"sidebar":"tutorialSidebar","previous":{"title":"38 Count and Say","permalink":"/note/algorithmPractice/leetcode/38"},"next":{"title":"40 Combination Sum II","permalink":"/note/algorithmPractice/leetcode/40"}}');var a=e(4848),r=e(8453);const s={sidebar_position:39},o="39 Combination Sum",c={},d=[];function u(n){const t={a:"a",br:"br",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"39-combination-sum",children:"39 Combination Sum"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://leetcode.com/problems/combination-sum/",children:"Leetcode"})}),"\n",(0,a.jsx)(t.p,{children:"Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order."}),"\n",(0,a.jsx)(t.p,{children:"The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different."}),"\n",(0,a.jsx)(t.p,{children:"It is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input."}),"\n",(0,a.jsx)(t.p,{children:"Example 1:"}),"\n",(0,a.jsxs)(t.p,{children:["Input: candidates = [2,3,6,7], target = 7",(0,a.jsx)(t.br,{}),"\n","Output: [[2,2,3],[7]]",(0,a.jsx)(t.br,{}),"\n","Explanation:",(0,a.jsx)(t.br,{}),"\n","2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.",(0,a.jsx)(t.br,{}),"\n","7 is a candidate, and 7 = 7.",(0,a.jsx)(t.br,{}),"\n","These are the only two combinations."]}),"\n",(0,a.jsx)(t.p,{children:"Example 2:"}),"\n",(0,a.jsxs)(t.p,{children:["Input: candidates = [2,3,5], target = 8",(0,a.jsx)(t.br,{}),"\n","Output: [[2,2,2,2],[2,3,3],[3,5]]"]}),"\n",(0,a.jsx)(t.p,{children:"Example 3:"}),"\n",(0,a.jsxs)(t.p,{children:["Input: candidates = [2], target = 1",(0,a.jsx)(t.br,{}),"\n","Output: []"]}),"\n",(0,a.jsx)(t.p,{children:"\u9012\u5f52\u3002\u4ece\u7b2c\u4e00\u4e2a\u6570\u5f00\u59cb\uff0c\u5c1d\u8bd5 0 \u6b21\uff0c1 \u6b21\u3002\u3002\u3002\u7136\u540e\u7b2c\u4e8c\u4e2a\u6570\u505a\u540c\u6837\u7684\u5c1d\u8bd5\uff0c\u76f4\u5230\u8d85\u8fc7\u76ee\u6807\u3002\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u6bcf\u4e2a\u6570\u7528\u4e86\u591a\u5c11\u6b21\uff0c\u4ee5\u4fbf\u751f\u6210 List \u3002"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"class Solution {\n    List<List<Integer>> ret;\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        ret=new ArrayList<>();\n        ArrayList<Integer> list=new ArrayList<>();\n        Arrays.sort(candidates);\n        int[] count=new int[candidates.length];\n        recur(candidates, target, candidates.length-1, count);\n        return ret;\n    }\n    \n    private void recur(int[] can, int target, int index, int[] count){\n        \n        if(index<0) return;\n        int cur=can[index];\n        recur(can,target,index-1, count);\n        while(target>0){\n            target=target-cur;\n            count[index]++;\n            if(target==0) {\n                ret.add(toList(can,count));\n            } else {\n                recur(can,target,index-1,count);\n            }\n        }\n        count[index]=0;\n        \n    }\n    \n    private List<Integer> toList(int[] can, int[] count){\n        ArrayList<Integer> list=new ArrayList<>();\n        for(int i=0;i<can.length;++i){\n            for(int j=0;j<count[i];++j){\n                list.add(can[i]);\n            }\n        }\n        return list;\n    }\n}\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"class Solution {\n    List<List<Integer>> ret;\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        ret=new LinkedList<>();\n        int[] count=new int[candidates.length];\n        dp(candidates, target, 0, count);\n        return ret;\n    }\n\n    private void dp(int[] candidates, int remain, int index, int[] count){\n\n        if(remain==0){\n            ret.add(toList(candidates, count));\n            return;\n        }\n        if(index==candidates.length) return;\n\n        int num=candidates[index];\n        do{\n\n            dp(candidates, remain, index+1, count);\n\n            remain-=num;\n            count[index]+=1;\n\n        } while (remain>=0);\n        count[index]=0;\n    }\n\n    private List<Integer> toList(int[] candidates, int[] count){\n        List<Integer> list=new LinkedList<>();\n        for(int i=0;i<count.length;++i){\n            if(count[i]!=0){\n                for(int j=0;j<count[i];++j){\n                    list.add(candidates[i]);\n                }\n            }\n        }\n        return list;\n    }\n}\n"})})]})}function l(n={}){const{wrapper:t}={...(0,r.R)(),...n.components};return t?(0,a.jsx)(t,{...n,children:(0,a.jsx)(u,{...n})}):u(n)}},8453:(n,t,e)=>{e.d(t,{R:()=>s,x:()=>o});var i=e(6540);const a={},r=i.createContext(a);function s(n){const t=i.useContext(r);return i.useMemo(function(){return"function"==typeof n?n(t):{...t,...n}},[t,n])}function o(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),i.createElement(r.Provider,{value:t},n.children)}}}]);