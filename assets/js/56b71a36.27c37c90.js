"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[6874],{5311:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"algorithmPractice/leetcode/1675","title":"1675 Minimize Deviation in Array","description":"Leetcode","source":"@site/note/algorithmPractice/leetcode/1675.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/1675","permalink":"/note/algorithmPractice/leetcode/1675","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1675,"frontMatter":{"sidebar_position":1675},"sidebar":"tutorialSidebar","previous":{"title":"1672 Richest Customer Wealth","permalink":"/note/algorithmPractice/leetcode/1672"},"next":{"title":"Spring Cloud","permalink":"/note/springcloud/"}}');var r=t(4848),a=t(8453);const s={sidebar_position:1675},o="1675 Minimize Deviation in Array",m={},l=[];function c(e){const n={a:"a",br:"br",code:"code",h1:"h1",header:"header",hr:"hr",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"1675-minimize-deviation-in-array",children:"1675 Minimize Deviation in Array"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/minimize-deviation-in-array/",children:"Leetcode"})}),"\n",(0,r.jsx)(n.p,{children:"You are given an array nums of n positive integers."}),"\n",(0,r.jsx)(n.p,{children:"You can perform two types of operations on any element of the array any number of times:"}),"\n",(0,r.jsxs)(n.p,{children:["If the element is even, divide it by 2.",(0,r.jsx)(n.br,{}),"\n","For example, if the array is [1,2,3,4], then you can do this operation on the last element, and the array will be [1,2,3,2].",(0,r.jsx)(n.br,{}),"\n","If the element is odd, multiply it by 2.",(0,r.jsx)(n.br,{}),"\n","For example, if the array is [1,2,3,4], then you can do this operation on the first element, and the array will be [2,2,3,4].",(0,r.jsx)(n.br,{}),"\n","The deviation of the array is the maximum difference between any two elements in the array."]}),"\n",(0,r.jsx)(n.p,{children:"Return the minimum deviation the array can have after performing some number of operations."}),"\n",(0,r.jsx)(n.p,{children:"Example 1:"}),"\n",(0,r.jsxs)(n.p,{children:["Input: nums = [1,2,3,4]",(0,r.jsx)(n.br,{}),"\n","Output: 1",(0,r.jsx)(n.br,{}),"\n","Explanation: You can transform the array to [1,2,3,2], then to [2,2,3,2], then the deviation will be 3 - 2 = 1."]}),"\n",(0,r.jsx)(n.p,{children:"Example 2:"}),"\n",(0,r.jsxs)(n.p,{children:["Input: nums = [4,1,5,20,3]",(0,r.jsx)(n.br,{}),"\n","Output: 3",(0,r.jsx)(n.br,{}),"\n","Explanation: You can transform the array after two operations to [4,2,5,5,3], then the deviation will be 5 - 2 = 3."]}),"\n",(0,r.jsx)(n.p,{children:"Example 3:"}),"\n",(0,r.jsxs)(n.p,{children:["Input: nums = [2,10,8]",(0,r.jsx)(n.br,{}),"\n","Output: 3"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"\u5947\u6570\u53ea\u80fd\u4e58\u4ee5\u4e00\u6b21 2 \uff0c\u800c\u5076\u6570\u53ef\u4ee5\u9664\u4ee5\u591a\u6b21 2 \uff0c\u76f4\u5230\u4e3a\u5947\u6570\u3002\u628a\u5947\u6570\u90fd\u4e58\u4ee5 2 \uff08\u4e4b\u540e\u5982\u679c\u9700\u8981\u8fd8\u53ef\u4ee5\u53d8\u56de\u6765\uff09\uff0c\u7136\u540e\u628a\u6240\u6709\u6570\u653e\u5728\u4e00\u4e2a TreeSet \u91cc\uff0c\u5b9e\u73b0\u81ea\u52a8\u53bb\u91cd\uff0c\u800c\u4e14\u53ef\u4ee5\u83b7\u53d6\u6700\u5927\u548c\u6700\u5c0f\u503c\u3002\u6839\u636e\u6700\u5927\u6700\u5c0f\u503c\u8ba1\u7b97\u5dee\u503c\uff0c\u7136\u540e\u53d6\u51fa\u6700\u5927\u503c\uff0c\u5982\u679c\u662f\u5076\u6570\u9664\u4ee5 2 \uff0c\u653e\u5165 set \uff0c\u518d\u8ba1\u7b97\u6700\u5c0f\u503c\uff0c\u4e0d\u65ad\u91cd\u590d\u3002\u6700\u5c0f\u503c\u4e00\u5b9a\u4f1a\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public int minimumDeviation(int[] nums) {\n    if(nums==null || nums.length==0) return 0;\n    TreeSet<Integer> set=new TreeSet<>();\n    for(int i:nums){\n        if( (i & 1) == 1){\n            i = i << 1;\n        }\n        set.add(i);\n    }\n    int min=set.last()-set.first();\n    int max=set.last();\n    while((max & 1) ==0){\n        set.remove(max);\n        max = max>>1;\n        set.add(max);\n        max=set.last();\n        int i=set.last()-set.first();\n        if(i<min) min=i;\n    }\n    return min;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4f18\u5148\u961f\u5217\uff08\u5927\u9876\u5806\uff09\uff0c\u53e6\u5916\u9700\u8981\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u6700\u5c0f\u503c\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public int minimumDeviation(int[] nums) {\n    if(nums==null || nums.length==0) return 0;\n    PriorityQueue<Integer> pq = new PriorityQueue<>((i1, i2)->i2-i1);\n    int min=Integer.MAX_VALUE;\n    for(int i:nums){\n        if((i & 1) == 1){\n            i=i<<1;\n        }\n        if(i<min) min=i;\n        pq.add(i);\n    }\n    int max=pq.peek();\n    int ret=max-min;\n    while((max & 1) ==0){\n        max=pq.poll()>>1;\n        if(max<min) min=max;\n        pq.add(max);\n        max=pq.peek();\n        if(pq.peek()-min<ret) ret=pq.peek()-min;\n    }\n    return ret;\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(6540);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);