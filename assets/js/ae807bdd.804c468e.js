"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[3366],{1673:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"algorithmPractice/leetcode/701","title":"701 Insert into a Binary Search Tree","description":"Leetcode","source":"@site/note/algorithmPractice/leetcode/701.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/701","permalink":"/note/algorithmPractice/leetcode/701","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":701,"frontMatter":{"sidebar_position":701},"sidebar":"tutorialSidebar","previous":{"title":"662 Maximum Width of Binary Tree","permalink":"/note/algorithmPractice/leetcode/662"},"next":{"title":"704 Binary Search","permalink":"/note/algorithmPractice/leetcode/704"}}');var o=n(4848),i=n(8453);const a={sidebar_position:701},s="701 Insert into a Binary Search Tree",c={},l=[];function d(e){const t={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"701-insert-into-a-binary-search-tree",children:"701 Insert into a Binary Search Tree"})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://leetcode.com/problems/insert-into-a-binary-search-tree/",children:"Leetcode"})}),"\n",(0,o.jsx)(t.p,{children:"You are given the root node of a binary search tree (BST) and a value to insert into the tree. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST."}),"\n",(0,o.jsx)(t.p,{children:"Notice that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them."}),"\n",(0,o.jsx)(t.p,{children:"\u6b63\u5e38\u63d2\u5230\u53f6\u5b50\u7ed3\u70b9\u6bd4\u8f83\u5bb9\u6613\uff0c\u5176\u5b83\u5b9e\u73b0\u65b9\u6cd5\u53ef\u80fd\u66f4\u590d\u6742\u4e14\u4f4e\u6548"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"class Solution {\n    public TreeNode insertIntoBST(TreeNode root, int val) {\n        if(root==null) {\n            root=new TreeNode(val);\n            return root;\n        }\n        if(val<root.val){\n            root.left= insertIntoBST(root.left,val);\n        } else {\n            root.right=insertIntoBST(root.right, val);\n        }\n        return root;\n    } \n}\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var r=n(6540);const o={},i=r.createContext(o);function a(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);