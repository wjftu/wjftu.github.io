"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[4032],{8280:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>t,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"springboot/data/redis","title":"Redis","description":"\u6dfb\u52a0 spring-boot-starter-data-redis \u4ee5\u53ca\u8fde\u63a5\u6c60\u4f9d\u8d56","source":"@site/note/springboot/data/redis.md","sourceDirName":"springboot/data","slug":"/springboot/data/redis","permalink":"/note/springboot/data/redis","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"title":"Redis","sidebar_position":10},"sidebar":"tutorialSidebar","previous":{"title":"JPA","permalink":"/note/springboot/data/jpa"},"next":{"title":"Liquibase","permalink":"/note/springboot/data/liquibase"}}');var a=r(4848),s=r(8453);const t={title:"Redis",sidebar_position:10},o=void 0,d={},c=[];function l(e){const n={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"\u6dfb\u52a0 spring-boot-starter-data-redis \u4ee5\u53ca\u8fde\u63a5\u6c60\u4f9d\u8d56"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.apache.commons</groupId>\n    <artifactId>commons-pool2</artifactId>\n    <version>2.11.1</version>\n</dependency>\n"})}),"\n",(0,a.jsx)(n.p,{children:"\u6d4b\u8bd5\u53ef\u4ee5\u4f7f\u7528 docker \u8fd0\u884c\u5355\u673a\u6a21\u5f0f redis \uff0c\u9ed8\u8ba4\u5bc6\u7801\u4e3a\u7a7a"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"docker run --name redis-test -p 6379:6379 redis\n"})}),"\n",(0,a.jsx)(n.p,{children:"Spring Boot \u4e2d\u7684 MySQL \u548c Redis \u914d\u7f6e"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yml",children:"spring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/test?useUnicode=true\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: user1\n    password: 123456\n  redis:\n    database: 0\n    host: localhost\n    port: 6379\n    timeout: 5000ms\n    lettuce:\n      pool-max-active: 8\n      pool-max-wait: -1ms\n      pool-max-idle: 4\n      pool-min-idle: 0\n"})}),"\n",(0,a.jsx)(n.p,{children:"\u53ef\u4ee5\u4f7f\u7528 RedisTemplate \u64cd\u4f5c redis"}),"\n",(0,a.jsx)(n.p,{children:"\u914d\u7f6e RedisTemplate \u3002\u5e8f\u5217\u5316\u5bf9\u8c61\u9700\u8981\u5b9e\u73b0 Serializable \uff0c\u6216\u81ea\u5b9a\u4e49\u5b9a\u4e49\u5e8f\u5217\u5316\u5668\u3002Serializable \u5bf9\u8c61\u5c06\u4f7f\u7528 JDK \u5e8f\u5217\u5316\uff0c\u6548\u679c\u4e0d\u592a\u53cb\u597d\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5e8f\u5217\u53f7\u5668\uff0c\u5982\u4f7f\u7528 GenericJackson2JsonRedisSerializer"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"@Bean\npublic RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory redisConnectionFactory){\n    RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n    redisTemplate.setConnectionFactory(redisConnectionFactory);\n    GenericJackson2JsonRedisSerializer jsonRedisSerializer = new GenericJackson2JsonRedisSerializer();\n    redisTemplate.setValueSerializer(jsonRedisSerializer);\n    redisTemplate.setKeySerializer(new StringRedisSerializer());\n    redisTemplate.setHashKeySerializer(new StringRedisSerializer());\n    redisTemplate.setHashValueSerializer(jsonRedisSerializer);\n    redisTemplate.afterPropertiesSet();\n    return redisTemplate;\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"\u5b9e\u4f53\u7c7b"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"@Data\n@ToString\npublic class User {\n    Integer id;\n    String name;\n    String password;\n    Date createTime;\n    Date updateTime;\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"redisTemplate.opsForValue()"})," \u53ef\u4ee5\u7528\u6765\u64cd\u4f5c string \u7c7b\u578b\u3002\u5728\u67e5\u8be2\u524d\u53ef\u4ee5\u67e5\u770b\u7f13\u5b58\u662f\u5426\u5b58\u5728\uff0c\u4e0d\u5b58\u5728\u5219\u67e5\u8be2\u6570\u636e\u5e93\u3002\u4fee\u6539\u548c\u65b0\u589e\u540e\u53ef\u4ee5\u66f4\u65b0\u7f13\u5b58"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"public User findById(Integer id) {\n    String key = CACHE_PRIFIX + id;\n    ValueOperations<String, User> operation = redisTemplate.opsForValue();\n    User user = operation.get(key);\n    if(user == null) {\n        user = userMapper.findById(id);\n        if(user != null) {\n            operation.set(key, user);\n        }\n    }\n    return user;\n}\n\npublic int insert( User user) {\n    int count = userMapper.insertSelective(user);\n    User user2 = userMapper.findById(user.getId());\n    String key = CACHE_PRIFIX + user.getId();\n\n    redisTemplate.opsForValue().set(key, user2);\n    return count;\n}\n\npublic int updateById(User user){\n    user.setUpdateTime(new Date());\n    int count = userMapper.updateByIdSelective(user);\n    User user2 = userMapper.findById(user.getId());\n    String key = CACHE_PRIFIX + user.getId();\n    redisTemplate.opsForValue().set(key, user2);\n    return count;\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"\u53ef\u4ee5\u548c spring-boot-start-cache \u4e00\u8d77\u4f7f\u7528\uff0c\u66f4\u52a0\u4f18\u96c5"}),"\n",(0,a.jsx)(n.p,{children:"\u5f15\u5165\u4f9d\u8d56"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-cache</artifactId>\n</dependency>\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'    @Bean\n    public CacheManager cacheManager(RedisConnectionFactory factory) {\n        // \u751f\u6210\u4e24\u5957\u9ed8\u8ba4\u914d\u7f6e\uff0c\u901a\u8fc7 Config \u5bf9\u8c61\u5373\u53ef\u5bf9\u7f13\u5b58\u8fdb\u884c\u81ea\u5b9a\u4e49\u914d\u7f6e\n        RedisCacheConfiguration cacheConfig = RedisCacheConfiguration.defaultCacheConfig()\n                .entryTtl(Duration.ofMinutes(1))\n                .prefixKeysWith("user:")\n                .disableCachingNullValues()\n                .serializeKeysWith(keyPair())\n                .serializeValuesWith(valuePair());\n        return RedisCacheManager\n                .builder(factory)\n                .withCacheConfiguration("user", cacheConfig)\n                .build();\n    }\n\n    private RedisSerializationContext.SerializationPair<String> keyPair() {\n        return RedisSerializationContext.SerializationPair.fromSerializer(new StringRedisSerializer());\n    }\n\n    private RedisSerializationContext.SerializationPair<Object> valuePair() {\n        return RedisSerializationContext.SerializationPair.fromSerializer(new GenericJackson2JsonRedisSerializer());\n    }\n'})}),"\n",(0,a.jsx)(n.p,{children:"service \u4f7f\u7528 CacheConfig \u6307\u5b9a cacheNames \uff0c\u65b9\u6cd5\u4f7f\u7528 Cacheable \u6ce8\u89e3\u5e76\u6307\u5b9a key \u7684\u503c\uff0c\u5373\u53ef\u81ea\u52a8\u8bfb\u53d6\u7f13\u5b58"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'@Service\n@CacheConfig(cacheNames = {"user"})\npublic class UserService {\n\n    @Cacheable(key="#id")\n    public User findByIdWithCache(Integer id) {\n        User user = userMapper.findById(id);\n        return user;\n    }\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>o});var i=r(6540);const a={},s=i.createContext(a);function t(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);