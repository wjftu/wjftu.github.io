"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[5945],{1511:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"algorithmPractice/leetcode/232","title":"232 Implement Queue using Stacks","description":"LeetCode","source":"@site/note/algorithmPractice/leetcode/232.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/232","permalink":"/note/algorithmPractice/leetcode/232","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":232,"frontMatter":{"sidebar_position":232},"sidebar":"tutorialSidebar","previous":{"title":"228 Summary Ranges","permalink":"/note/algorithmPractice/leetcode/228"},"next":{"title":"236 Lowest Common Ancestor of a Binary Tree","permalink":"/note/algorithmPractice/leetcode/236"}}');var r=t(4848),u=t(8453);const o={sidebar_position:232},i="232 Implement Queue using Stacks",a={},p=[];function c(e){const n={a:"a",br:"br",code:"code",h1:"h1",header:"header",hr:"hr",p:"p",pre:"pre",...(0,u.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"232-implement-queue-using-stacks",children:"232 Implement Queue using Stacks"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/implement-queue-using-stacks/",children:"LeetCode"})}),"\n",(0,r.jsx)(n.p,{children:"Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty)."}),"\n",(0,r.jsx)(n.p,{children:"Implement the MyQueue class:"}),"\n",(0,r.jsxs)(n.p,{children:["void push(int x) Pushes element x to the back of the queue.",(0,r.jsx)(n.br,{}),"\n","int pop() Removes the element from the front of the queue and returns it.",(0,r.jsx)(n.br,{}),"\n","int peek() Returns the element at the front of the queue.",(0,r.jsx)(n.br,{}),"\n","boolean empty() Returns true if the queue is empty, false otherwise."]}),"\n",(0,r.jsx)(n.p,{children:"Notes:"}),"\n",(0,r.jsxs)(n.p,{children:["You must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.",(0,r.jsx)(n.br,{}),"\n","Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations."]}),"\n",(0,r.jsx)(n.p,{children:"Example 1:"}),"\n",(0,r.jsxs)(n.p,{children:["Input",(0,r.jsx)(n.br,{}),"\n",'["MyQueue", "push", "push", "peek", "pop", "empty"]',(0,r.jsx)(n.br,{}),"\n","[[], [1], [2], [], [], []]"]}),"\n",(0,r.jsxs)(n.p,{children:["Output",(0,r.jsx)(n.br,{}),"\n","[null, null, null, 1, 1, false]"]}),"\n",(0,r.jsxs)(n.p,{children:["Explanation",(0,r.jsx)(n.br,{}),"\n","MyQueue myQueue = new MyQueue();",(0,r.jsx)(n.br,{}),"\n","myQueue.push(1); // queue is: [1]",(0,r.jsx)(n.br,{}),"\n","myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)",(0,r.jsx)(n.br,{}),"\n","myQueue.peek(); // return 1",(0,r.jsx)(n.br,{}),"\n","myQueue.pop(); // return 1, queue is [2]",(0,r.jsx)(n.br,{}),"\n","myQueue.empty(); // return false"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"\u4f7f\u7528 2 \u4e2a\u6808\uff0c\u5f53\u4e00\u4e2a\u6808\u7684\u5143\u7d20\u5168\u90e8\u5f39\u51fa\u5e76\u538b\u5165\u53e6\u4e00\u4e2a\u6808\u65f6\uff0c\u987a\u5e8f\u5c31\u98a0\u5012\u4e86\uff0c\u53d8\u6210\u961f\u5217"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"class MyQueue {\n    \n    Deque<Integer> stack1, stack2;\n\n    public MyQueue() {\n        stack1 = new LinkedList<>();\n        stack2 = new LinkedList<>();\n    }\n    \n    public void push(int x) {\n        stack1.push(x);\n    }\n    \n    public int pop() {\n        if(stack2.isEmpty()) transfer();\n        return stack2.pop();\n    }\n    \n    public int peek() {\n        if(stack2.isEmpty()) transfer();\n        return stack2.peek();\n    }\n    \n    private void transfer(){\n        while(!stack1.isEmpty()){\n            stack2.push(stack1.pop());\n        }\n    }\n    \n    public boolean empty() {\n        return stack1.isEmpty() && stack2.isEmpty();\n    }\n}\n\n"})})]})}function l(e={}){const{wrapper:n}={...(0,u.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var s=t(6540);const r={},u=s.createContext(r);function o(e){const n=s.useContext(u);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(u.Provider,{value:n},e.children)}}}]);