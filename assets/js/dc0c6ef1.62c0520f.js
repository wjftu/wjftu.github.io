"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[9331],{2174:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>g,frontMatter:()=>c,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"java/advanced/crypto","title":"\u52a0\u89e3\u5bc6","description":"\u5b57\u7b26\u96c6","source":"@site/note/java/advanced/crypto.md","sourceDirName":"java/advanced","slug":"/java/advanced/crypto","permalink":"/note/java/advanced/crypto","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"\u52a0\u89e3\u5bc6","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"\u591a\u7ebf\u7a0b","permalink":"/note/java/advanced/thread"},"next":{"title":"Kubenetes","permalink":"/note/kubernetes/"}}');var i=t(4848),a=t(8453);const c={title:"\u52a0\u89e3\u5bc6",sidebar_position:3},d=void 0,s={},o=[{value:"\u5b57\u7b26\u96c6",id:"\u5b57\u7b26\u96c6",level:3},{value:"Base64 \u7f16\u7801",id:"base64-\u7f16\u7801",level:3},{value:"URL \u7f16\u7801",id:"url-\u7f16\u7801",level:3},{value:"\u6458\u8981\u7b97\u6cd5",id:"\u6458\u8981\u7b97\u6cd5",level:3},{value:"\u5bf9\u79f0\u52a0\u5bc6",id:"\u5bf9\u79f0\u52a0\u5bc6",level:3},{value:"\u975e\u5bf9\u79f0\u52a0\u5bc6",id:"\u975e\u5bf9\u79f0\u52a0\u5bc6",level:3}];function l(e){const n={code:"code",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h3,{id:"\u5b57\u7b26\u96c6",children:"\u5b57\u7b26\u96c6"}),"\n",(0,i.jsxs)(n.p,{children:["\u53ef\u4ee5\u4f7f\u7528 Charset \u7c7b\u7684 ",(0,i.jsx)(n.code,{children:"static Charset forName(String charsetName)"})," \u65b9\u6cd5\u83b7\u53d6 Charset \u5bf9\u8c61\u3002\u5bf9\u4e8e\u4e00\u4e9b\u5e38\u7528\u7684\u7f16\u7801\u7c7b\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 StandardCharsets \u7684\u9759\u6001\u53d8\u91cf\u83b7\u53d6\uff0c\u5982 utf8"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'Charset gbk = Charset.forName("GBK");\nString name = gbk.name(); //"GBK"\nCharset utf8 = Charset.forName("UTF-8");\nString name1 = utf8.name(); //"UTF-8"\nCharset utf81 = StandardCharsets.UTF_8;\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u53ef\u4ee5\u4f7f\u7528 String \u7684 getBytes(Charset charset) \u65b9\u6cd5\u83b7\u53d6\u5b57\u8282\u6570\u7ec4\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u4f20 Charset \u4f7f\u7528\u9ed8\u8ba4\u7f16\u7801\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'String s = "a\u738b";\nbyte[] bytes = s.getBytes(StandardCharsets.UTF_8); //{97,-25,-114,-117}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"base64-\u7f16\u7801",children:"Base64 \u7f16\u7801"}),"\n",(0,i.jsxs)(n.p,{children:["Base64 \u7f16\u7801\uff0c\u53ef\u4ee5\u4f7f\u7528 jdk \u81ea\u5e26\u7684 ",(0,i.jsx)(n.code,{children:"java.util.Base64"})," \u83b7\u53d6\u7f16\u7801\u548c\u89e3\u7801\u5668\uff0c\u5bf9\u5b57\u8282\u6570\u7ec4\u8fdb\u884c base64 \u7f16\u7801"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'String s = "a\u738b";\nbyte[] bytes = s.getBytes(StandardCharsets.UTF_8);\nString base64Str = Base64.getEncoder().encodeToString(bytes); //YeeOiw==\nbyte[] decode = Base64.getDecoder().decode(base64Str);\nString str = new String(decode, StandardCharsets.UTF_8);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"url-\u7f16\u7801",children:"URL \u7f16\u7801"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'String s="hello world \u738b";\nString encoded = URLEncoder.encode(s, StandardCharsets.UTF_8); //hello+world+%E7%8E%8B\nString decoded = URLDecoder.decode(encoded, StandardCharsets.UTF_8);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"\u6458\u8981\u7b97\u6cd5",children:"\u6458\u8981\u7b97\u6cd5"}),"\n",(0,i.jsx)(n.p,{children:"\u4f7f\u7528 MessageDigest.getInstance(String algorithm) \u65b9\u6cd5\u83b7\u53d6\u6458\u8981\u52a0\u5bc6\u7c7b\uff0c\u4f8b\u5982 MD5 \u548c SHA-256"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'MessageDigest md5 = MessageDigest.getInstance("MD5");\nbyte[] digest = md5.digest("123".getBytes());\n/*\nmd5.update("123".getBytes());\nbyte[] digest1 = md5.digest();\n*/\nmd5.update("123".getBytes());\ndigest = md5.digest();\nString s = bytes2HexStr(digest); //202CB962AC59075B964B07152D234B70\n\nMessageDigest sha256 = MessageDigest.getInstance("SHA-256");\ndigest = sha256.digest("123".getBytes());\ns = bytes2HexStr(digest); //A665A45920422F9D417E4867EFDC4FB8A04A1F3FFF1FA07E998E86F7F7A27AE3\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u53ef\u4ee5\u7528\u4e00\u4e2a\u65b9\u6cd5\u5c06\u5b57\u8282\u6570\u7ec4\u8f6c\u5316\u4e3a\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u5b57\u8282\u7528\u4e24\u4e2a\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u8868\u793a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public static char[] HEX_ARRAY="0123456789ABCDEF".toCharArray();\n\npublic String bytes2HexStr(byte[] bytes){\n    char[] ret=new char[bytes.length << 1];\n    for(int i=0;i<bytes.length;++i){\n        int val= bytes[i] & 0xFF;\n        int index=i<<1;\n        ret[index] = HEX_ARRAY[val >>> 4 ];\n        ret[index+1] = HEX_ARRAY[val & 0x0f];\n    }\n    return String.valueOf(ret);\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"\u5bf9\u79f0\u52a0\u5bc6",children:"\u5bf9\u79f0\u52a0\u5bc6"}),"\n",(0,i.jsx)(n.p,{children:"DES \u52a0\u89e3\u5bc6"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Test\npublic void testDes() throws NoSuchPaddingException, NoSuchAlgorithmException,\n        UnsupportedEncodingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n    String key = "12345678";\n    String plain = "hello world";\n    plain = "hello world";\n    String encodeStr = encodeDES(plain, key); //KNugLrX23UddguNoHIO7dw==\n    System.out.println(encodeStr);\n    String decodeStr = decodeDES(encodeStr, key);\n    System.out.println(decodeStr);\n}\n\npublic String encodeDES(String plainStr, String key) throws NoSuchPaddingException, NoSuchAlgorithmException,\n        InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n    SecretKey secretKey = new SecretKeySpec(key.getBytes(StandardCharsets.UTF_8), "DES");\n    Cipher cipher = Cipher.getInstance("DES");\n    cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n    byte[] encodedBytes = cipher.doFinal(plainStr.getBytes(StandardCharsets.UTF_8));\n    return Base64.getEncoder().encodeToString(encodedBytes);\n}\n\npublic String decodeDES(String encodedStr, String key) throws NoSuchPaddingException,\n        NoSuchAlgorithmException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n    SecretKey secretKey = new SecretKeySpec(key.getBytes(StandardCharsets.UTF_8), "DES");\n    Cipher cipher = Cipher.getInstance("DES");\n    cipher.init(Cipher.DECRYPT_MODE, secretKey);\n    byte[] encodedBytes = Base64.getDecoder().decode(encodedStr);\n    byte[] decodedBytes = cipher.doFinal(encodedBytes);\n    return new String(decodedBytes, StandardCharsets.UTF_8);\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"AES \u52a0\u89e3\u5bc6"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Test\npublic void testAes() throws NoSuchPaddingException, NoSuchAlgorithmException,\n        UnsupportedEncodingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n    String key = "1234567812345678";\n    String plain = "hello world";\n    plain = "hello world";\n    String encodeStr = encodeAES(plain, key); //Z1jAYXYOkKaeXk38DGHBAg==\n    System.out.println(encodeStr);\n    String decodeStr = decodeAES(encodeStr, key);\n    System.out.println(decodeStr);\n}\n\npublic String encodeAES(String plainStr, String key) throws NoSuchPaddingException,    NoSuchAlgorithmException,\n        InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n    SecretKey secretKey = new SecretKeySpec(key.getBytes(StandardCharsets.UTF_8), "AES");\n    Cipher cipher = Cipher.getInstance("AES");\n    cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n    byte[] encodedBytes = cipher.doFinal(plainStr.getBytes(StandardCharsets.UTF_8));\n    return Base64.getEncoder().encodeToString(encodedBytes);\n}\n\npublic String decodeAES(String encodedStr, String key) throws NoSuchPaddingException,\n        NoSuchAlgorithmException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n    SecretKey secretKey = new SecretKeySpec(key.getBytes(StandardCharsets.UTF_8), "AES");\n    Cipher cipher = Cipher.getInstance("AES");\n    cipher.init(Cipher.DECRYPT_MODE, secretKey);\n    byte[] encodedBytes = Base64.getDecoder().decode(encodedStr);\n    byte[] decodedBytes = cipher.doFinal(encodedBytes);\n    return new String(decodedBytes, StandardCharsets.UTF_8);\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"ECB \u6a21\u5f0f\uff08Electronic Codebook\uff09"}),"\n",(0,i.jsx)(n.p,{children:"\u5206\u6210\u5f88\u591a\u5757\uff0c\u6bcf\u4e2a\u5757\u4f7f\u7528\u540c\u6837\u7684 key \u72ec\u7acb\u52a0\u5bc6\uff0c\u7136\u540e\u7ec4\u5408\u5230\u4e00\u8d77\uff0c\u53ef\u4ee5\u5e76\u884c\u5904\u7406\uff0c\u901f\u5ea6\u5feb\u3002"}),"\n",(0,i.jsx)(n.p,{children:"CBC \u6a21\u5f0f\uff08Cipher Block Chain\uff09"}),"\n",(0,i.jsx)(n.p,{children:"\u6bcf\u4e2a\u660e\u6587\u5757\u4e0e\u524d\u4e00\u4e2a\u5f02\u6216\u5904\u7406\u540e\u518d\u8fdb\u884c\u52a0\u5bc6\uff0c\u6bcf\u4e2a\u660e\u6587\u5757\u90fd\u53d6\u51b3\u4e8e\u524d\u9762\u7684\u5bc6\u6587\u5757\uff0c\u7b2c\u4e00\u4e2a\u660e\u6587\u5757\u524d\u9762\u6ca1\u6709\uff0c\u9700\u8981\u4e00\u4e2a Initialization Vector"}),"\n",(0,i.jsx)(n.h3,{id:"\u975e\u5bf9\u79f0\u52a0\u5bc6",children:"\u975e\u5bf9\u79f0\u52a0\u5bc6"}),"\n",(0,i.jsx)(n.p,{children:"RSA"}),"\n",(0,i.jsx)(n.p,{children:"\u751f\u6210\u516c\u79c1\u94a5"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");\nKeyPair keyPair = keyPairGenerator.generateKeyPair();\nPublicKey publicKey = keyPair.getPublic();\nPrivateKey privateKey = keyPair.getPrivate();\nbyte[] encodedPublicKey = publicKey.getEncoded();\nbyte[] encodedPrivateKey = privateKey.getEncoded();\nString publicKeyStr = Base64.getEncoder().encodeToString(encodedPublicKey);\nString privateKeyStr = Base64.getEncoder().encodeToString(encodedPrivateKey);\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u7531 Base64 \u683c\u5f0f\u7684\u5bc6\u94a5\u751f\u6210\u79d8\u94a5\u7c7b"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public Key getPublicKey(String key, String algorithm) throws NoSuchAlgorithmException, InvalidKeySpecException {\n    KeyFactory keyFactory = KeyFactory.getInstance(algorithm);\n    byte[] bytesKey = Base64.getDecoder().decode(key.getBytes(StandardCharsets.UTF_8));\n    X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(bytesKey); //\u89c4\u8303\n    return keyFactory.generatePublic(x509EncodedKeySpec);\n}\n\npublic Key getPrivateKey(String key, String algorithm) throws NoSuchAlgorithmException, InvalidKeySpecException {\n    KeyFactory keyFactory = KeyFactory.getInstance(algorithm);\n    byte[] bytesKey = Base64.getDecoder().decode(key.getBytes(StandardCharsets.UTF_8));\n    PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(bytesKey); //\u89c4\u8303\n    return keyFactory.generatePrivate(pkcs8EncodedKeySpec);\n}\n\n@Test\npublic void testRSA() throws NoSuchAlgorithmException, InvalidKeySpecException {\n    String privatekeyStr = "MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCanWbkkyNZp3NUlCAb5AHWhl65VpoAmVqy7quKy2Fri1K5v3a7YciHf1DD9dh7tJlnNXakgNQPz9ZvMukb0tKB5OE1F5v3HN6aOu+OnlOhCHxgJnqBD7n7pok+j1jytzqRJsvoGn9aSdUrAoB5RyVB7IIabUmBjl0pG3Yz7jdxqlJbHMnn1uPVUjxbm3FP4ti8HZayCAjQ/2oxVEWgqhExRWEqCrcb0H22oIbIdBDq9Hf5VN6fU5AMSZSWYeo1x0CrBzbnU5V/1OI34Zp1oJ/ul+daF8L8bB8BfUAjhEmhaYwZG1V0l2K/L3qLaGvPZxy3YUaJ9uON/B/z8q7M+MyRAgMBAAECggEAd7LeAp2K45DIr7UReqY1ahCS6ueJyGbxGc++jHBR1oGBJP5+fCkCpyvAqkT9OSAjFw0D8e0uv6MG/wWqBHldsWQxmfnSLCh0iXCRH5ehZOz95S5E7v/u200duYoesaF6vP8NI37IE21Pk8GXFs0moffo7W6oVp2RsA5rn16QG/UsVlg5goD3YKIoGs1Jt1M+Kn+EcN070KLwa2DKllXLuFmNn1LIO1SdcPJ26VVDL34Iy02Ca9CtcqgVJZhsEgH0wGzW8KOuuWBnTQqJscxJml7U1yir0BmREho0hgaxbGOf+FDzLfyI17gt6TgkxXvPy/wHoVyfIv8ff+S7/SFEcQKBgQDXOxQmj/Mv5cKgAn/U2G1WQPhedMj4V1j+HFb89+gGfQaZwTDT0A3KUk+qsIUMq152407swFeVpNi2MmsejlKIKBABerIFrgbeta41iIHePgY3K16s+iazHUsTseGyBe3Q12cg2RzLu1GM1wUwdYXZU444scUHQuCo9igs4nLkfQKBgQC35vMhGMvp0KTLKV/OJyNMfn9N++WjJGPrqLlrmXuhOsPsUFzW259L9rhi+rGAszSU8kne1Q3SvRug/escjbU9iuy3jHSt2c+++Lp42Yh5wYUsism4t2RkAboGIuWi4P3chx9AQ1fhw8mOYCaNnKFx2eIFd3/EfXOEwsQgF5gopQKBgQCB4HGhb34FKjVOjxOKYetggCYgAYMAcN0PwhQv5HzL5YglIfIP7t1TeGYAjzJKWeLQBQysSsjPUUFAeJ4xOxrMdLhr3Bku2jvlCmcMgMo1TOI9SluAMBdIQGX8hXu3DGLcgg8GQF1jBy8HuPy1qEVTxlrtFUDax91/t8K4ixFflQKBgGJaZ+lpg5UW+yuUgyKUF/LPLHKep5/q1G2ynQgI2+/Mp//4ss5OQxGzb8Wv4cK9FQAb3JoKRAxTCzW810M8HpQ9eoBn4/ceqFawW7pKTQ0hDIJX766UlmJN8hlaDIph3iNVOMd7vMKHnYJBthzCii2Do7fcwz5pAaEdMRsgw0XpAoGBAJG94UW24ivF1hxvCZjIWmxap9sQXxDrxa4emsAcXWDU25zdZgewlEjcKRVt6Ru6mV6UiZeGJwA1/XWBf4VywskH3cJc/XP9kPxPSNV7AmVVumH6u8LKAhkeqrpjNKaydS9d5ooPvC5q8y/79HXXJNWbKGgQzcYIOmDflpo6tB3o";\n    String publicKeyStr = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmp1m5JMjWadzVJQgG+QB1oZeuVaaAJlasu6ristha4tSub92u2HIh39Qw/XYe7SZZzV2pIDUD8/WbzLpG9LSgeThNReb9xzemjrvjp5ToQh8YCZ6gQ+5+6aJPo9Y8rc6kSbL6Bp/WknVKwKAeUclQeyCGm1JgY5dKRt2M+43capSWxzJ59bj1VI8W5txT+LYvB2WsggI0P9qMVRFoKoRMUVhKgq3G9B9tqCGyHQQ6vR3+VTen1OQDEmUlmHqNcdAqwc251OVf9TiN+GadaCf7pfnWhfC/GwfAX1AI4RJoWmMGRtVdJdivy96i2hrz2cct2FGifbjjfwf8/KuzPjMkQIDAQAB";\n    Key privateKey = getPrivateKey(privatekeyStr, "RSA");\n    System.out.println(privateKey);\n    Key publicKey = getPublicKey(publicKeyStr,"RSA");\n    System.out.println(publicKey);\n}\n/*\nSunRsaSign RSA private CRT key, 2048 bits\n  params: null\n  modulus: 19518316746980006197499252108474458208595118318714598477402216422741762270617563921259490652779226389204601564768697913647528765148276187597142621074255593750241828242128424629490748078111359726946341328262265868029971300880328967381963935592600975192059392211738219374013299841894352093839442371909268038569238960018354578412054842801554759611349070653322482768047844061614848973306477210553483827573431440083395602488188682967542063511633504494033928910588120183635715611472199414804181959910017485320313016262530974457663339037079381704695056495476354636932998909603096310786747488952928213894334443395574494973073\n  private exponent: 15110561008156073278339251937495896762584349575608016585256515474322120211854728484259926106627700525032788647507048324530183971761418571648324231585890505517585785732042508513152449535974122380732662770222051411359028547122468999466846273100108269806666728453346385040195809910099542886997143409426133824753547713720025009287361041593030040338310811868135478978866909890429594419172650067295268639247338764693845455672940451217845104246689772108577297429981713800928785271949306650074370153562961035011898962795136229137658239450161987191845286042655849756852863725142397644582283802607692499250817435869368731911281\nSun RSA public key, 2048 bits\n  params: null\n  modulus: 19518316746980006197499252108474458208595118318714598477402216422741762270617563921259490652779226389204601564768697913647528765148276187597142621074255593750241828242128424629490748078111359726946341328262265868029971300880328967381963935592600975192059392211738219374013299841894352093839442371909268038569238960018354578412054842801554759611349070653322482768047844061614848973306477210553483827573431440083395602488188682967542063511633504494033928910588120183635715611472199414804181959910017485320313016262530974457663339037079381704695056495476354636932998909603096310786747488952928213894334443395574494973073\n  public exponent: 65537\n*/\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u52a0\u89e3\u5bc6\uff0c\u516c\u94a5\u52a0\u5bc6\u79c1\u94a5\u89e3\u5bc6\uff0c\u6216\u8005\u79c1\u94a5\u52a0\u5bc6\u516c\u94a5\u89e3\u5bc6"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public String encryptRSA(String plain, Key privateKey) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n    Cipher cipher = Cipher.getInstance("RSA");\n    cipher.init(Cipher.ENCRYPT_MODE, privateKey);\n    byte[] bytes = cipher.doFinal(plain.getBytes(StandardCharsets.UTF_8));\n    return Base64.getEncoder().encodeToString(bytes);\n\n}\n\npublic String decryptRSA(String encrypted, Key publicKey) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n    byte[] bytes = Base64.getDecoder().decode(encrypted);\n    Cipher cipher = Cipher.getInstance("RSA");\n    cipher.init(Cipher.DECRYPT_MODE, publicKey);\n    byte[] bytesPlain = cipher.doFinal(bytes);\n    return new String(bytesPlain,StandardCharsets.UTF_8);\n}\n'})})]})}function g(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>d});var r=t(6540);const i={},a=r.createContext(i);function c(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);