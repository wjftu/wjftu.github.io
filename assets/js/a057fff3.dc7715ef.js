"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[737],{8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}},9731:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"algorithmPractice/leetcode/46","title":"46 Permutations","description":"Leetcode","source":"@site/note/algorithmPractice/leetcode/46.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/46","permalink":"/note/algorithmPractice/leetcode/46","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":46,"frontMatter":{"sidebar_position":46},"sidebar":"tutorialSidebar","previous":{"title":"45 Jump Game II","permalink":"/note/algorithmPractice/leetcode/45"},"next":{"title":"47 Permutations II","permalink":"/note/algorithmPractice/leetcode/47"}}');var r=t(4848),s=t(8453);const o={sidebar_position:46},a="46 Permutations",c={},l=[];function d(e){const n={a:"a",br:"br",code:"code",h1:"h1",header:"header",hr:"hr",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"46-permutations",children:"46 Permutations"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/permutations/",children:"Leetcode"})}),"\n",(0,r.jsx)(n.p,{children:"Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order."}),"\n",(0,r.jsx)(n.p,{children:"Example 1:"}),"\n",(0,r.jsxs)(n.p,{children:["Input: nums = [1,2,3]",(0,r.jsx)(n.br,{}),"\n","Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]"]}),"\n",(0,r.jsx)(n.p,{children:"Example 2:"}),"\n",(0,r.jsxs)(n.p,{children:["Input: nums = [0,1]",(0,r.jsx)(n.br,{}),"\n","Output: [[0,1],[1,0]]"]}),"\n",(0,r.jsx)(n.p,{children:"Example 3:"}),"\n",(0,r.jsxs)(n.p,{children:["Input: nums = [1]",(0,r.jsx)(n.br,{}),"\n","Output: [[1]]"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u9012\u5f52\uff0c\u6bcf\u4e00\u4f4d\u4f9d\u6b21\u4e0d\u65ad\u5c06\u5269\u4f59\u6570\u7ec4\u5143\u7d20\u653e\u5165 list \uff0c\u4f7f\u7528\u4e00\u4e2a boolean \u6570\u7ec4\u6807\u8bb0\u6570\u5b57\u662f\u5426\u4f7f\u7528\u8fc7\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"class Solution {\n    List<List<Integer>> ret;\n    List<Integer> list;\n    boolean[] visited;\n    public List<List<Integer>> permute(int[] nums) {\n        ret=new LinkedList<>();\n        list=new ArrayList<>();\n        visited=new boolean[nums.length];\n        dfs(nums, 0);\n        return ret;\n    }\n    \n    private void dfs(int[] nums, int index){\n        if(index==nums.length){\n            ret.add(new ArrayList<>(list));\n            return;\n        }\n        \n        for(int i=0;i<nums.length;++i){\n            if(visited[i]) continue;\n            list.add(nums[i]);\n            visited[i] = true;\n            dfs(nums, index+1);\n            list.remove(index);\n            visited[i] = false;\n        }\n    }\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);