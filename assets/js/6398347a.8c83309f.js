"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[2300],{6971:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"algorithmPractice/leetcode/127","title":"127 Word Ladder","description":"Leetcode","source":"@site/note/algorithmPractice/leetcode/127.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/127","permalink":"/note/algorithmPractice/leetcode/127","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":127,"frontMatter":{"sidebar_position":127},"sidebar":"tutorialSidebar","previous":{"title":"124 Binary Tree Maximum Path Sum","permalink":"/note/algorithmPractice/leetcode/124"},"next":{"title":"133 Clone Graph","permalink":"/note/algorithmPractice/leetcode/133"}}');var i=t(4848),o=t(8453);const s={sidebar_position:127},d="127 Word Ladder",a={},c=[];function l(e){const n={a:"a",br:"br",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"127-word-ladder",children:"127 Word Ladder"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/word-ladder/",children:"Leetcode"})}),"\n",(0,i.jsx)(n.p,{children:"A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:"}),"\n",(0,i.jsxs)(n.p,{children:["Every adjacent pair of words differs by a single letter.",(0,i.jsx)(n.br,{}),"\n","Every si for ",(0,i.jsx)(n.code,{children:"1 <= i <= k"})," is in wordList. Note that beginWord does not need to be in wordList.",(0,i.jsx)(n.br,{}),"\n","sk == endWord",(0,i.jsx)(n.br,{}),"\n","Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists."]}),"\n",(0,i.jsx)(n.p,{children:"Example 1:"}),"\n",(0,i.jsxs)(n.p,{children:['Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]',(0,i.jsx)(n.br,{}),"\n","Output: 5",(0,i.jsx)(n.br,{}),"\n",'Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.']}),"\n",(0,i.jsx)(n.p,{children:"Example 2:"}),"\n",(0,i.jsxs)(n.p,{children:['Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]',(0,i.jsx)(n.br,{}),"\n","Output: 0",(0,i.jsx)(n.br,{}),"\n",'Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.']}),"\n",(0,i.jsx)(n.p,{children:"\u4f7f\u7528\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"}),"\n",(0,i.jsx)(n.p,{children:"TODO \u4f7f\u7528\u53cc\u5411\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u5e94\u8be5\u66f4\u5feb\u4e00\u4e9b"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'    public int ladderLength(String beginWord, String endWord, List<String> wordList) {\n\n        ArrayList<String> list=new ArrayList<>(wordList);\n        int end=list.indexOf(endWord);\n        if(end<0) return 0;\n        int wordLen=beginWord.length();\n        list.add(beginWord);\n        int len=list.size();\n        boolean[][] graph=new boolean[len][len];\n        for (int i = 0; i < len; i++) {\n            for (int j = i+1; j < len; j++) {\n                if( connected(list.get(i),list.get(j))){\n                    graph[i][j]=true;\n                    graph[j][i]=true;\n                }\n            }\n        }\n        boolean[] visited=new boolean[len];\n        visited[len-1]=true;\n        int step=1;\n\n        Queue<Integer> queue = new LinkedList<>();\n        queue.add(len-1);\n\n        while(!queue.isEmpty()) {\n            step++;\n//            HashSet<String> set=new HashSet<>();\n            int size=queue.size();\n            for (int i = 0; i < size; i++) {\n                int index = queue.poll();\n                if (graph[index][end])\n                    return step;\n                for (int j = 0; j < len; j++) {\n                    if ( !visited[j] && graph[j][index]) {\n                        queue.add(j);\n                        visited[j]=true;\n//                        set.add(list.get(j));\n                    }\n                }\n            }\n//            System.out.println("step:"+step+" "+set);\n        }\n        return 0;\n    }\n    \n    private boolean connected(String s1, String s2){\n        int count=0;\n        for (int i = 0; i < s1.length(); i++) {\n            if(s1.charAt(i)!=s2.charAt(i)) {\n                count++;\n                if(count>1) return false;\n            }\n        }\n        return true;\n    }\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>d});var r=t(6540);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);