"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[9452],{2794:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>s});const i=JSON.parse('{"id":"algorithmPractice/leetcode/662","title":"662 Maximum Width of Binary Tree","description":"LeetCode","source":"@site/note/algorithmPractice/leetcode/662.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/662","permalink":"/note/algorithmPractice/leetcode/662","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":662,"frontMatter":{"sidebar_position":662},"sidebar":"tutorialSidebar","previous":{"title":"617 Merge Two Binary Trees","permalink":"/note/algorithmPractice/leetcode/617"},"next":{"title":"701 Insert into a Binary Search Tree","permalink":"/note/algorithmPractice/leetcode/701"}}');var r=t(4848),l=t(8453);const o={sidebar_position:662},a="662 Maximum Width of Binary Tree",d={},s=[];function h(e){const n={a:"a",br:"br",code:"code",h1:"h1",header:"header",hr:"hr",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"662-maximum-width-of-binary-tree",children:"662 Maximum Width of Binary Tree"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/maximum-width-of-binary-tree/",children:"LeetCode"})}),"\n",(0,r.jsx)(n.p,{children:"Given the root of a binary tree, return the maximum width of the given tree."}),"\n",(0,r.jsx)(n.p,{children:"The maximum width of a tree is the maximum width among all levels."}),"\n",(0,r.jsx)(n.p,{children:"The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes are also counted into the length calculation."}),"\n",(0,r.jsx)(n.p,{children:"It is guaranteed that the answer will in the range of 32-bit signed integer."}),"\n",(0,r.jsx)(n.p,{children:"Example 1:"}),"\n",(0,r.jsxs)(n.p,{children:["Input: root = [1,3,2,5,3,null,9]",(0,r.jsx)(n.br,{}),"\n","Output: 4",(0,r.jsx)(n.br,{}),"\n","Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9)."]}),"\n",(0,r.jsx)(n.p,{children:"Example 2:"}),"\n",(0,r.jsxs)(n.p,{children:["Input: root = [1,3,null,5,3]",(0,r.jsx)(n.br,{}),"\n","Output: 2",(0,r.jsx)(n.br,{}),"\n","Explanation: The maximum width existing in the third level with the length 2 (5,3)."]}),"\n",(0,r.jsx)(n.p,{children:"Example 3:"}),"\n",(0,r.jsxs)(n.p,{children:["Input: root = [1,3,2,5]",(0,r.jsx)(n.br,{}),"\n","Output: 2",(0,r.jsx)(n.br,{}),"\n","Explanation: The maximum width existing in the second level with the length 2 (3,2)."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"\u5b9a\u4e49\u4e00\u4e2a id \u6765\u8868\u793a\u4e00\u884c\u4e2d\u7684\u5750\u6807\uff0c\u5982\u679c\u586b\u6ee1\u4e3a\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6700\u5de6\u8fb9 id \u662f 0 \uff0c\u5f53\u524d\u8282\u70b9\u7684\u5de6\u5b50\u6811 id \u4e3a\u5f53\u524d\u8282\u70b9\u7684 id \u4e58\u4ee5 2 \uff0c\u53f3\u5b50\u6811\u4e3a id \u4e58\u4ee5 2 \u52a0 1 \u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u4f7f\u7528\u4e24\u4e2a List \u8bb0\u5f55\u6bcf\u4e00\u884c\u7684\u6700\u5c0f id \u548c\u6700\u5927\u5bbd\u5ea6\u3002\u4f7f\u7528\u524d\u5e8f\u904d\u5386\uff0c\u5e26\u7740\u5c42\u6570\u548c id \u904d\u5386\uff0c\u6bcf\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u904d\u5386\u5230\u7684\u8282\u70b9\u662f\u6700\u5de6\u7684\u8282\u70b9\uff0c\u66f4\u65b0\u5f53\u524d\u884c\u7684\u6700\u5c0f id \uff0c\u5176\u4f59\u8282\u70b9\u4e0d\u662f\u6700\u5de6\u8282\u70b9\uff0c\u8ba1\u7b97\u5bbd\u5ea6\u5e76\u66f4\u65b0\u6700\u5927\u5bbd\u5ea6\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    \n    ArrayList<Integer> levelMin;\n    ArrayList<Integer> levelMax;\n    public int widthOfBinaryTree(TreeNode root) {\n        if(root==null) return 0;\n\n        levelMin = new ArrayList<>();\n        levelMax = new ArrayList<>();\n        preOrder(root,0,0);\n        int max=0;\n        for(int i:levelMax){\n            if(i>max) max=i;\n        }\n        return max+1;\n    }\n    \n    private void preOrder(TreeNode root, int depth, int id){\n\n        if(levelMin.size()==depth) {\n            levelMin.add(id);\n            levelMax.add(0);\n        } else {\n            int cur = id-levelMin.get(depth);\n            if(cur > levelMax.get(depth)) levelMax.set(depth,cur);\n        }\n\n        \n        if(root.left!=null){\n            preOrder(root.left, depth+1, id*2);\n        } \n        if(root.right!=null){\n            preOrder(root.right, depth+1, id*2+1);\n        }\n        \n    }\n}\n"})})]})}function c(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const r={},l=i.createContext(r);function o(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);