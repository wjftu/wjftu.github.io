"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[7376],{4702:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"algorithmPractice/leetcode/946","title":"946 Validate Stack Sequences","description":"Leetcode","source":"@site/note/algorithmPractice/leetcode/946.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/946","permalink":"/note/algorithmPractice/leetcode/946","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":946,"frontMatter":{"sidebar_position":946},"sidebar":"tutorialSidebar","previous":{"title":"847 Shortest Path Visiting All Nodes","permalink":"/note/algorithmPractice/leetcode/847"},"next":{"title":"986 Interval List Intersections","permalink":"/note/algorithmPractice/leetcode/986"}}');var r=n(4848),i=n(8453);const o={sidebar_position:946},a="946 Validate Stack Sequences",p={},c=[];function l(e){const t={a:"a",br:"br",code:"code",h1:"h1",header:"header",hr:"hr",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"946-validate-stack-sequences",children:"946 Validate Stack Sequences"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://leetcode.com/problems/validate-stack-sequences/",children:"Leetcode"})}),"\n",(0,r.jsx)(t.p,{children:"Given two integer arrays pushed and popped each with distinct values, return true if this could have been the result of a sequence of push and pop operations on an initially empty stack, or false otherwise."}),"\n",(0,r.jsx)(t.p,{children:"Example 1:"}),"\n",(0,r.jsxs)(t.p,{children:["Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]",(0,r.jsx)(t.br,{}),"\n","Output: true",(0,r.jsx)(t.br,{}),"\n","Explanation: We might do the following sequence:",(0,r.jsx)(t.br,{}),"\n","push(1), push(2), push(3), push(4),",(0,r.jsx)(t.br,{}),"\n","pop() -> 4,",(0,r.jsx)(t.br,{}),"\n","push(5),",(0,r.jsx)(t.br,{}),"\n","pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1"]}),"\n",(0,r.jsx)(t.p,{children:"Example 2:"}),"\n",(0,r.jsxs)(t.p,{children:["Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]",(0,r.jsx)(t.br,{}),"\n","Output: false",(0,r.jsx)(t.br,{}),"\n","Explanation: 1 cannot be popped before 2."]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.p,{children:"\u4f7f\u7528\u4e00\u4e2a\u771f\u5b9e\u7684\u6808\u6765\u6a21\u62df\u538b\u5165\u548c\u5f39\u51fa\u7684\u8fc7\u7a0b\uff0c\u5982\u679c\u6700\u540e\u6808\u4e3a\u7a7a\uff0c\u5219\u538b\u5165\u5f39\u51fa\u5e8f\u5217\u6ca1\u6709\u95ee\u9898"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"public boolean validateStackSequences(int[] pushed, int[] popped) {\n    if(pushed==null || popped==null || pushed.length!=popped.length) return false;\n    int i1=0, i2=0;\n    Deque<Integer> stack=new LinkedList<>();\n    while(i1<pushed.length){\n        stack.push(pushed[i1++]);\n        while(!stack.isEmpty() && stack.peek()==popped[i2]){\n            stack.pop();\n            i2++;\n        }\n    }\n    return stack.isEmpty();      \n}\n"})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var s=n(6540);const r={},i=s.createContext(r);function o(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);