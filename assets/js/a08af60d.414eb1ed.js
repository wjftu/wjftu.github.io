"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[9465],{1401:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"algorithmPractice/leetcode/124","title":"124 Binary Tree Maximum Path Sum","description":"Leetcode","source":"@site/note/algorithmPractice/leetcode/124.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/124","permalink":"/note/algorithmPractice/leetcode/124","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":124,"frontMatter":{"sidebar_position":124},"sidebar":"tutorialSidebar","previous":{"title":"121 Best Time to Buy and Sell Stock","permalink":"/note/algorithmPractice/leetcode/121"},"next":{"title":"127 Word Ladder","permalink":"/note/algorithmPractice/leetcode/127"}}');var o=n(4848),a=n(8453);const i={sidebar_position:124},l="124 Binary Tree Maximum Path Sum",s={},h=[];function c(e){const t={a:"a",br:"br",code:"code",h1:"h1",header:"header",hr:"hr",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"124-binary-tree-maximum-path-sum",children:"124 Binary Tree Maximum Path Sum"})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://leetcode.com/problems/binary-tree-maximum-path-sum/",children:"Leetcode"})}),"\n",(0,o.jsx)(t.p,{children:"A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root."}),"\n",(0,o.jsx)(t.p,{children:"The path sum of a path is the sum of the node's values in the path."}),"\n",(0,o.jsx)(t.p,{children:"Given the root of a binary tree, return the maximum path sum of any non-empty path."}),"\n",(0,o.jsx)(t.p,{children:"Example 1:"}),"\n",(0,o.jsxs)(t.p,{children:["Input: root = [1,2,3]",(0,o.jsx)(t.br,{}),"\n","Output: 6",(0,o.jsx)(t.br,{}),"\n","Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6."]}),"\n",(0,o.jsx)(t.p,{children:"Example 2:"}),"\n",(0,o.jsxs)(t.p,{children:["Input: root = [-10,9,20,null,null,15,7]",(0,o.jsx)(t.br,{}),"\n","Output: 42",(0,o.jsx)(t.br,{}),"\n","Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42."]}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsx)(t.p,{children:"\u4f7f\u7528\u4e00\u4e2a max \u65b9\u6cd5\u5bf9\u6811\u8fdb\u884c\u9012\u5f52\u904d\u5386\uff0c\u8fd4\u56de\u503c\u4e3a\u4ee5\u6b64\u4f5c\u4e3a\u5b50\u8def\u5f84\u80fd\u5f97\u5230\u7684\u6700\u5927\u503c\u3002\u603b\u7684\u6700\u5927\u503c\u6709\u591a\u79cd\u60c5\u51b5\uff0c\u5f53\u524d\u8282\u70b9\u4e3a\u6839\u8282\u70b9\uff0c\u6700\u5927\u503c\u4e3a\u5f53\u524d\u8282\u70b9\u7684\u503c\u52a0\u4e0a\u5de6\u5b50\u6811\u8fd4\u56de\u503c\u548c\u53f3\u5b50\u6811\u8fd4\u56de\u503c\uff08\u5982\u679c\u4e24\u4e2a\u90fd\u662f\u6b63\u7684\uff09\uff0c\u5982\u679c\u5de6\u53f3\u5b50\u6811\u53ea\u6709\u4e00\u4e2a\u662f\u6b63\u7684\uff0c\u53ea\u52a0\u4e0a\u6b63\u7684\uff0c\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u5b50\u6811\u5b58\u5728\uff0c\u6700\u5927\u503c\u4e3a\u5f53\u524d\u8282\u70b9\u7684\u503c\u52a0\u4e0a\u5b50\u6811\u7684\u8fd4\u56de\u503c\uff08\u5982\u679c\u8fd4\u56de\u503c\u4e3a\u6b63\uff09\uff0c\u6216\u5f53\u524d\u8282\u70b9\u7684\u503c\uff08\u5b50\u6811\u8fd4\u56de\u503c\u4e3a\u8d1f\uff09\u3002"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int max;\n    public int maxPathSum(TreeNode root) {\n        if(root==null) return 0;\n        max=Integer.MIN_VALUE;\n        max(root);\n        return max;\n    }\n    \n    private int max(TreeNode root){\n        int total=root.val;\n        if(root.left!=null && root.right!=null){\n            int left=max(root.left);\n            int right=max(root.right);\n            if(total+left+right>max) max=total+left+right;\n            int bigger=left>right?left:right;\n            if(bigger<0) bigger=0;            \n            total+=bigger;\n        } else if(root.left!=null){\n            int left=max(root.left);\n            if(left<0) left=0;\n            total+=left;\n        } else if(root.right!=null){\n            int right=max(root.right);\n            if(right<0) right=0;\n            total+=right;\n        }\n        if(total>max) max=total;\n        return total;\n    }\n}\n"})})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var r=n(6540);const o={},a=r.createContext(o);function i(e){const t=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);