"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[4118],{2518:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"algorithmPractice/leetcode/844","title":"844 Backspace String Compare","description":"Leetcode","source":"@site/note/algorithmPractice/leetcode/844.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/844","permalink":"/note/algorithmPractice/leetcode/844","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":844,"frontMatter":{"sidebar_position":844},"sidebar":"tutorialSidebar","previous":{"title":"799 Champagne Tower","permalink":"/note/algorithmPractice/leetcode/799"},"next":{"title":"847 Shortest Path Visiting All Nodes","permalink":"/note/algorithmPractice/leetcode/847"}}');var c=t(4848),i=t(8453);const a={sidebar_position:844},s="844 Backspace String Compare",o={},l=[];function p(e){const n={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"844-backspace-string-compare",children:"844 Backspace String Compare"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.a,{href:"https://leetcode.com/problems/backspace-string-compare/",children:"Leetcode"})}),"\n",(0,c.jsx)(n.p,{children:"Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character."}),"\n",(0,c.jsx)(n.p,{children:"Note that after backspacing an empty text, the text will continue empty."}),"\n",(0,c.jsx)(n.p,{children:"Example 1:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:'Input: s = "ab#c", t = "ad#c"  \nOutput: true  \nExplanation: Both s and t become "ac".\n'})}),"\n",(0,c.jsx)(n.p,{children:"Example 2:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:'Input: s = "ab##", t = "c#d#"\nOutput: true\nExplanation: Both s and t become "".\n'})}),"\n",(0,c.jsx)(n.p,{children:"Example 3:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:'Input: s = "a#c", t = "b"\nOutput: false\nExplanation: s becomes "c" while t becomes "b".\n'})}),"\n",(0,c.jsx)(n.p,{children:"\u8f6c\u5316\u6210\u5b57\u7b26\u4e32\u6bd4\u8f83\u3002\u4f7f\u7528\u6808\uff0c\u9047\u5230\u5b57\u6bcd\u538b\u5165\uff0c\u9047\u5230 # \u53f7\u5f39\u51fa\u3002\u65f6\u95f4\u590d\u6742\u5ea6 o(n) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 o(n)"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-java",children:"    public boolean backspaceCompare(String s, String t) {\n        return getStr(s).equals(getStr(t));\n    }\n    \n    public String getStr(String s){\n        Deque<Character> stack = new LinkedList<>();\n        for(int i=0;i<s.length();++i){\n            char c=s.charAt(i);\n            if(c=='#'){\n                if(stack.size()>0) stack.pop();\n            } else {\n                stack.push(c);\n            }\n        }\n        StringBuilder sb=new StringBuilder(stack.size());\n        while(stack.size()>0){\n            sb.append(stack.removeLast());\n        }\n        return sb.toString();\n    }\n"})}),"\n",(0,c.jsxs)(n.p,{children:["\u65f6\u95f4\u590d\u6742\u5ea6 o(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 o(1) \u7684\u65b9\u6cd5\uff1a\u4ece\u540e\u5f80\u524d\u904d\u5386\uff0c\u9047\u5230 ",(0,c.jsx)(n.code,{children:"#"})," \u5c31\u8ba1\u6570\uff0c\u4e0d\u65ad\u5f80\u5de6\u79fb\u52a8\u5230\u5934\u6216\u8005\u5230\u8be5\u5220\u9664\u7684\u5b57\u6bcd\u90fd\u5220\u9664\u4e86\uff0c\u5f97\u5230\u7684\u5b57\u6bcd\u5c31\u662f\u6700\u7ec8\u7ed3\u679c\u7684\u53f3\u8fb9\u7684\u5b57\u6bcd\uff0c\u4e0d\u65ad\u91cd\u590d\uff0c\u4ece\u6700\u7ec8\u7ed3\u679c\u7684\u53f3\u8fb9\u4f9d\u6b21\u6bd4\u8f83\u3002"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-java",children:"public boolean backspaceCompare(String s, String t) {\n    int i1=0, i2=0;\n    char c1=' ',c2=' ';\n    int count1=0, count2=0;\n    while(true){\n        while(count1>0 && i1>=0){\n\n            c1=s.charAt(i1--);\n            if(c1=='#') count1++;\n        }\n        while(count2>0 && i2>0){\n            \n            c2=t.charAt(i2);\n            i2--;\n            if(c2=='#') count2++;\n        }\n        if(c1!=c2) return false;\n        if(i1==-1 && i2==-1) return true;\n        if(i1==-1 || i1==-1){\n            while(i1>=0){\n                if(s.charAt(i1--)!='#') return false;\n            }\n            while(i2>=0){\n                if(t.charAt(i2--)!='#') return false;\n            }\n            return true;\n        }\n    }\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var r=t(6540);const c={},i=r.createContext(c);function a(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);