"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[6622],{8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>c});var i=n(6540);const s={},r=i.createContext(s);function o(e){const t=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:t},e.children)}},9105:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"algorithmPractice/leetcode/986","title":"986 Interval List Intersections","description":"Leetcode","source":"@site/note/algorithmPractice/leetcode/986.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/986","permalink":"/note/algorithmPractice/leetcode/986","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":986,"frontMatter":{"sidebar_position":986},"sidebar":"tutorialSidebar","previous":{"title":"946 Validate Stack Sequences","permalink":"/note/algorithmPractice/leetcode/946"},"next":{"title":"1202 Smallest String With Swaps","permalink":"/note/algorithmPractice/leetcode/1202"}}');var s=n(4848),r=n(8453);const o={sidebar_position:986},c="986 Interval List Intersections",a={},l=[];function d(e){const t={a:"a",code:"code",h1:"h1",header:"header",hr:"hr",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"986-interval-list-intersections",children:"986 Interval List Intersections"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://leetcode.com/problems/interval-list-intersections/",children:"Leetcode"})}),"\n",(0,s.jsx)(t.p,{children:"You are given two lists of closed intervals, firstList and secondList, where firstList[i] = [starti, endi] and secondList[j] = [startj, endj]. Each list of intervals is pairwise disjoint and in sorted order."}),"\n",(0,s.jsx)(t.p,{children:"Return the intersection of these two interval lists."}),"\n",(0,s.jsxs)(t.p,{children:["A closed interval [a, b] (with ",(0,s.jsx)(t.code,{children:"a <= b"}),") denotes the set of real numbers x with ",(0,s.jsx)(t.code,{children:"a <= x <= b"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"The intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of [1, 3] and [2, 4] is [2, 3]."}),"\n",(0,s.jsx)(t.p,{children:"Example 1:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"Input: firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]\nOutput: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Example 2:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"Input: firstList = [[1,3],[5,9]], secondList = []\nOutput: []\n"})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.p,{children:"\u4e00\u6b21\u6bd4\u8f83\u4e24\u4e2a list \u7684\u6570\u636e\u7247\u6bb5\u3002\u53d6\u51fa\u76f8\u4ea4\u7684\u90e8\u5206\u3002\u8fd9\u4e24\u4e2a\u6570\u636e\u6bb5\u4e2d\u7ed3\u5c3e\u5750\u6807\u5927\u7684\u90a3\u4e2a\u4e5f\u8bb8\u8fd8\u53ef\u4ee5\u548c\u5176\u4ed6\u7684\u76f8\u4ea4\u3002"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"public int[][] intervalIntersection(int[][] firstList, int[][] secondList) {\n    LinkedList<int[]> list=new LinkedList<>();\n    int i1=0, i2=0;\n    while(i1<firstList.length && i2<secondList.length){\n        if(firstList[i1][1]<secondList[i2][0]){\n            i1++;\n        } else if(secondList[i2][1]<firstList[i1][0]){\n            i2++;\n        } else {\n            int begin=Math.max(firstList[i1][0], secondList[i2][0]);\n            int end1 = firstList[i1][1], end2 = secondList[i2][1];\n            int end=Math.min(end1, end2);\n            list.add(new int[]{begin, end});\n            if(end1>end2){\n                i2++;\n            } else {\n                i1++;\n            }\n        }\n    }\n    int[][] arr=new int[list.size()][];\n    list.toArray(arr);\n    return arr;\n}\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);