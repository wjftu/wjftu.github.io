"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[7390],{1910:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"algorithmPractice/leetcode/36","title":"36 Valid Sudoku","description":"LeetCode 36 Valid Sudoku","source":"@site/note/algorithmPractice/leetcode/36.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/36","permalink":"/note/algorithmPractice/leetcode/36","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":36,"frontMatter":{"sidebar_position":36},"sidebar":"tutorialSidebar","previous":{"title":"34 Find First and Last Position of Element in Sorted Array","permalink":"/note/algorithmPractice/leetcode/34"},"next":{"title":"37 Sudoku Solver","permalink":"/note/algorithmPractice/leetcode/37"}}');var r=i(4848),o=i(8453);const a={sidebar_position:36},l="36 Valid Sudoku",c={},d=[];function s(e){const n={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"36-valid-sudoku",children:"36 Valid Sudoku"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/valid-sudoku/",children:"LeetCode 36 Valid Sudoku"})}),"\n",(0,r.jsx)(n.p,{children:"Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Each row must contain the digits 1-9 without repetition."}),"\n",(0,r.jsx)(n.li,{children:"Each column must contain the digits 1-9 without repetition."}),"\n",(0,r.jsx)(n.li,{children:"Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Note:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A Sudoku board (partially filled) could be valid but is not necessarily solvable."}),"\n",(0,r.jsx)(n.li,{children:"Only the filled cells need to be validated according to the mentioned rules."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public boolean isValidSudoku(char[][] board) {\n        for(int i=0;i<9;++i){\n            if(!(isRowValid(board,i) && isColValid(board,i))) return false;\n        }\n        \n        for(int i=0;i<9;i=i+3){\n            for(int j=0;j<9;j=j+3){\n                if(!isBlockValid(board,i,j)) return false;\n            }\n        }\n        return true;\n    }\n    \n    private boolean isRowValid(char[][] board, int row){\n        boolean[] arr=new boolean[9];\n        for(int j=0;j<9;++j){\n            char c = board[row][j];\n            if(c>='1' && c<='9'){\n                int val = c-'1';\n                if(arr[val]) return false;\n                arr[val] = true;\n            }\n        }\n        return true;\n    }\n    \n    private boolean isColValid(char[][] board, int col){\n        boolean[] arr=new boolean[9];\n        for(int i=0;i<9;++i){\n            char c = board[i][col];\n            if(c>='1' && c<='9'){\n                int val = c-'1';\n                if(arr[val]) return false;\n                arr[val] = true;\n            }\n        }\n        return true;\n    }\n    \n    private boolean isBlockValid(char[][] board, int i, int j){\n        int row=i/3*3;\n        int col=j/3*3;\n        boolean[] arr=new boolean[9];\n        for(int ii=0;ii<3;ii++){\n            for(int jj=0;jj<3;jj++){\n                char c=board[row+ii][col+jj];\n                if(c>='1' && c<='9'){\n                    int val = c-'1';\n                    if(arr[val]) return false;\n                    arr[val] = true;\n                }\n            }\n        }\n        return true;         \n    }\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var t=i(6540);const r={},o=t.createContext(r);function a(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);