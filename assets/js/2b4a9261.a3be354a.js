"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[1344],{2911:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"algorithmPractice/leetcode/133","title":"133 Clone Graph","description":"Leetcode","source":"@site/note/algorithmPractice/leetcode/133.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/133","permalink":"/note/algorithmPractice/leetcode/133","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":133,"frontMatter":{"sidebar_position":133},"sidebar":"tutorialSidebar","previous":{"title":"127 Word Ladder","permalink":"/note/algorithmPractice/leetcode/127"},"next":{"title":"136","permalink":"/note/algorithmPractice/leetcode/136"}}');var a=t(4848),r=t(8453);const s={sidebar_position:133},i="133 Clone Graph",d={},l=[];function c(e){const n={a:"a",br:"br",code:"code",h1:"h1",header:"header",hr:"hr",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"133-clone-graph",children:"133 Clone Graph"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://leetcode.com/problems/clone-graph/",children:"Leetcode"})}),"\n",(0,a.jsx)(n.p,{children:"Given a reference of a node in a connected undirected graph."}),"\n",(0,a.jsx)(n.p,{children:"Return a deep copy (clone) of the graph."}),"\n",(0,a.jsx)(n.p,{children:"Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"class Node {\n    public int val;\n    public List<Node> neighbors;\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Test case format:"}),"\n",(0,a.jsx)(n.p,{children:"For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list."}),"\n",(0,a.jsx)(n.p,{children:"An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph."}),"\n",(0,a.jsx)(n.p,{children:"The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph."}),"\n",(0,a.jsx)(n.p,{children:"Example 1:"}),"\n",(0,a.jsxs)(n.p,{children:["Input: adjList = [[2,4],[1,3],[2,4],[1,3]]",(0,a.jsx)(n.br,{}),"\n","Output: [[2,4],[1,3],[2,4],[1,3]]",(0,a.jsx)(n.br,{}),"\n","Explanation: There are 4 nodes in the graph.",(0,a.jsx)(n.br,{}),"\n","1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).",(0,a.jsx)(n.br,{}),"\n","2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).",(0,a.jsx)(n.br,{}),"\n","3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).",(0,a.jsx)(n.br,{}),"\n","4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3)."]}),"\n",(0,a.jsx)(n.p,{children:"Example 2:"}),"\n",(0,a.jsxs)(n.p,{children:["Input: adjList = [[]]",(0,a.jsx)(n.br,{}),"\n","Output: [[]]",(0,a.jsx)(n.br,{}),"\n","Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors."]}),"\n",(0,a.jsx)(n.p,{children:"Example 3:"}),"\n",(0,a.jsxs)(n.p,{children:["Input: adjList = []",(0,a.jsx)(n.br,{}),"\n","Output: []",(0,a.jsx)(n.br,{}),"\n","Explanation: This an empty graph, it does not have any nodes."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:"\u5bf9\u56fe\u7684\u8282\u70b9\u8fdb\u884c\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u4e0d\u65ad\u590d\u5236\u8282\u70b9\u3002\u4f7f\u7528\u4e00\u4e2a map \u6765\u50a8\u5b58\u4e24\u4e2a\u56fe\u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u4ee5\u514d\u91cd\u590d\u65b0\u5efa\u8282\u70b9\u3002"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n    public Node() {\n        val = 0;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val) {\n        val = _val;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val, ArrayList<Node> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n}\n*/\n\nclass Solution {\n    public Node cloneGraph(Node node) {\n        if(node==null) return null;\n        HashMap<Node, Node> map = new HashMap<>();\n        Queue<Node> queue = new LinkedList<>();\n        map.put(node, new Node(node.val));\n        queue.add(node);\n        while(!queue.isEmpty()){\n            Node old = queue.poll();\n            Node copy = map.get(old);\n            for(Node n: old.neighbors){\n                if(!map.containsKey(n)){\n                    map.put(n, new Node(n.val));\n                    queue.add(n);\n                }\n                copy.neighbors.add(map.get(n));\n            }\n        }\n        return map.get(node);\n    }\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var o=t(6540);const a={},r=o.createContext(a);function s(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);