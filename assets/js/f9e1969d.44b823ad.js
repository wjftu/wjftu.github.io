"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[5896],{5033:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>u,default:()=>l,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"algorithmPractice/leetcode/209","title":"209 Minimum Size Subarray Sum","description":"Leetcode","source":"@site/note/algorithmPractice/leetcode/209.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/209","permalink":"/note/algorithmPractice/leetcode/209","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":209,"frontMatter":{"sidebar_position":209},"sidebar":"tutorialSidebar","previous":{"title":"207 Course Schedule","permalink":"/note/algorithmPractice/leetcode/207"},"next":{"title":"211 Design Add and Search Words Data Structure","permalink":"/note/algorithmPractice/leetcode/211"}}');var i=t(4848),s=t(8453);const a={sidebar_position:209},u="209 Minimum Size Subarray Sum",o={},c=[];function m(e){const n={a:"a",br:"br",code:"code",h1:"h1",header:"header",hr:"hr",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"209-minimum-size-subarray-sum",children:"209 Minimum Size Subarray Sum"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/minimum-size-subarray-sum/",children:"Leetcode"})}),"\n",(0,i.jsx)(n.p,{children:"Given an array of positive integers nums and a positive integer target, return the minimal length of a contiguous subarray [numsl, numsl+1, ..., numsr-1, numsr] of which the sum is greater than or equal to target. If there is no such subarray, return 0 instead."}),"\n",(0,i.jsx)(n.p,{children:"Example 1:"}),"\n",(0,i.jsxs)(n.p,{children:["Input: target = 7, nums = [2,3,1,2,4,3]",(0,i.jsx)(n.br,{}),"\n","Output: 2",(0,i.jsx)(n.br,{}),"\n","Explanation: The subarray [4,3] has the minimal length under the problem constraint."]}),"\n",(0,i.jsx)(n.p,{children:"Example 2:"}),"\n",(0,i.jsxs)(n.p,{children:["Input: target = 4, nums = [1,4,4]",(0,i.jsx)(n.br,{}),"\n","Output: 1"]}),"\n",(0,i.jsx)(n.p,{children:"Example 3:"}),"\n",(0,i.jsxs)(n.p,{children:["Input: target = 11, nums = [1,1,1,1,1,1,1,1]",(0,i.jsx)(n.br,{}),"\n","Output: 0"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"\u6ed1\u52a8\u7a97\u53e3\u3002\u5de6\u53f3\u4e24\u4e2a\u6307\u9488\uff0c\u79fb\u52a8\u53f3\u6307\u9488\u7ed9\u7a97\u53e3\u52a0\u5165\u5143\u7d20\uff0c\u7a97\u53e3\u6240\u6709\u5143\u7d20\u548c\u5927\u4e8e target \uff0c\u8bb0\u5f55\u6b64\u65f6\u7684\u957f\u5ea6\uff0c\u7136\u540e\u4e0d\u65ad\u79fb\u52a8\u5de6\u6307\u9488\u76f4\u5230\u7a97\u53e3\u5143\u7d20\u548c\u5c0f\u4e8e target"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public int minSubArrayLen(int target, int[] nums) {\n    int left=0, right=0;\n    int min=Integer.MAX_VALUE;\n    if(nums==null || nums.length==0) return min;\n    int sum=0;\n    while(right<nums.length || sum>=target){\n        if(sum>=target){\n            if(right-left<min) min=right-left;\n            if(min==1) return 1;\n            sum-=nums[left++];\n        } else if (sum<target){\n            sum+=nums[right++];\n        } \n        \n    }\n    return min==Integer.MAX_VALUE?0:min;\n}\n"})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>u});var r=t(6540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);