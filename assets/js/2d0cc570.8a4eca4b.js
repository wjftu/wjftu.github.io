"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[3515],{1076:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"algorithmPractice/leetcode/linkedlist","title":"Linked List","description":"2 Add Two Numbers","source":"@site/note/algorithmPractice/leetcode/linkedlist.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/linkedlist","permalink":"/note/algorithmPractice/leetcode/linkedlist","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":-1,"frontMatter":{"sidebar_position":-1},"sidebar":"tutorialSidebar","previous":{"title":"Hash Table","permalink":"/note/algorithmPractice/leetcode/hashtable"},"next":{"title":"Tree","permalink":"/note/algorithmPractice/leetcode/tree"}}');var l=t(4848),i=t(8453);const s={sidebar_position:-1},a="Linked List",d={},o=[{value:"2 Add Two Numbers",id:"2-add-two-numbers",level:3},{value:"160 Intersection of Two Linked Lists",id:"160-intersection-of-two-linked-lists",level:3},{value:"206 Reverse Linked List",id:"206-reverse-linked-list",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"linked-list",children:"Linked List"})}),"\n",(0,l.jsx)(n.h3,{id:"2-add-two-numbers",children:(0,l.jsx)(n.a,{href:"2",children:"2 Add Two Numbers"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"class Solution {\r\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\r\n        ListNode ret,p;\r\n        int carry=0;\r\n        ret=new ListNode((l1.val+l2.val)%10);\r\n        p=ret;\r\n        carry=(l1.val+l2.val)/10;\r\n        l1=l1.next; l2=l2.next;\r\n        while(l1!=null && l2!=null){\r\n            p.next=new ListNode((l1.val+l2.val+carry)%10);\r\n            p=p.next;\r\n            carry=(l1.val+l2.val+carry)/10;\r\n            l1=l1.next; l2=l2.next;\r\n        }\r\n        while(l1!=null){\r\n            p.next=new ListNode((l1.val+carry)%10);\r\n            p=p.next;\r\n            carry=(l1.val+carry)/10;\r\n            l1=l1.next;\r\n        }\r\n        while(l2!=null){\r\n            p.next=new ListNode((l2.val+carry)%10);\r\n            p=p.next;\r\n            carry=(l2.val+carry)/10;\r\n            l2=l2.next;\r\n        }\r\n        if(carry==1)\r\n            p.next=new ListNode(1);\r\n        return ret;\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"160-intersection-of-two-linked-lists",children:(0,l.jsx)(n.a,{href:"160",children:"160 Intersection of Two Linked Lists"})}),"\n",(0,l.jsx)(n.p,{children:"Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"public class Solution {\r\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\r\n        ListNode p1=headA, p2=headB;\r\n        int count=0;\r\n        while(p1 != p2){\r\n            if(p1.next==null){\r\n                p1=headB;\r\n                ++count;\r\n                if(count>1) return null;\r\n            } else {\r\n                p1=p1.next;\r\n            }\r\n            p2=p2.next!=null? p2.next:headA;\r\n        }\r\n        return p1;\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"206-reverse-linked-list",children:(0,l.jsx)(n.a,{href:"206",children:"206 Reverse Linked List"})}),"\n",(0,l.jsx)(n.p,{children:"Given the head of a singly linked list, reverse the list, and return the reversed list."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"class Solution {\r\n    public ListNode reverseList(ListNode head) {\r\n        ListNode h = new ListNode();\r\n        ListNode t;\r\n        while(head != null){\r\n            t=head.next;\r\n            head.next=h.next;\r\n            h.next=head;\r\n            head=t;\r\n        }\r\n        return h.next;\r\n    }\r\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(6540);const l={},i=r.createContext(l);function s(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);