"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[7327],{8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>a});var i=t(6540);const s={},c=i.createContext(s);function r(n){const e=i.useContext(c);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),i.createElement(c.Provider,{value:e},n.children)}},9811:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>a,default:()=>l,frontMatter:()=>r,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"algorithmPractice/codingInterviews/30","title":"30 \u5305\u542b min \u51fd\u6570\u7684\u6808","description":"leetcode-cn","source":"@site/note/algorithmPractice/codingInterviews/30.md","sourceDirName":"algorithmPractice/codingInterviews","slug":"/algorithmPractice/codingInterviews/30","permalink":"/note/algorithmPractice/codingInterviews/30","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":30,"frontMatter":{"sidebar_position":30},"sidebar":"tutorialSidebar","previous":{"title":"29 \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635","permalink":"/note/algorithmPractice/codingInterviews/29"},"next":{"title":"31 \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217","permalink":"/note/algorithmPractice/codingInterviews/31"}}');var s=t(4848),c=t(8453);const r={sidebar_position:30},a="30 \u5305\u542b min \u51fd\u6570\u7684\u6808",o={},p=[];function d(n){const e={a:"a",br:"br",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,c.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"30-\u5305\u542b-min-\u51fd\u6570\u7684\u6808",children:"30 \u5305\u542b min \u51fd\u6570\u7684\u6808"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.a,{href:"https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof",children:"leetcode-cn"})}),"\n",(0,s.jsx)(e.p,{children:"\u5b9a\u4e49\u6808\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bf7\u5728\u8be5\u7c7b\u578b\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u80fd\u591f\u5f97\u5230\u6808\u7684\u6700\u5c0f\u5143\u7d20\u7684 min \u51fd\u6570\u5728\u8be5\u6808\u4e2d\uff0c\u8c03\u7528 min\u3001push \u53ca pop \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(1)\u3002"}),"\n",(0,s.jsx)(e.p,{children:"\u793a\u4f8b:"}),"\n",(0,s.jsxs)(e.p,{children:["MinStack minStack = new MinStack();",(0,s.jsx)(e.br,{}),"\n","minStack.push(-2);",(0,s.jsx)(e.br,{}),"\n","minStack.push(0);",(0,s.jsx)(e.br,{}),"\n","minStack.push(-3);\nminStack.min();   --\x3e \u8fd4\u56de -3.",(0,s.jsx)(e.br,{}),"\n","minStack.pop();",(0,s.jsx)(e.br,{}),"\n","minStack.top();      --\x3e \u8fd4\u56de 0.\nminStack.min();   --\x3e \u8fd4\u56de -2."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"class MinStack {\n    Deque<Integer> stack;\n    Deque<Integer> min;\n\n    /** initialize your data structure here. */\n    public MinStack() {\n        stack=new LinkedList<>();\n        min=new LinkedList<>();\n    }\n    \n    public void push(int x) {\n        stack.push(x);\n        if(min.isEmpty() || min.peek()>x){\n            min.push(x);\n        } else {\n            min.push(min.peek());\n        }\n    }\n    \n    public void pop() {\n        stack.pop();\n        min.pop();\n    }\n    \n    public int top() {\n        return stack.peek();\n    }\n    \n    public int min() {\n        return min.peek();\n    }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack obj = new MinStack();\n * obj.push(x);\n * obj.pop();\n * int param_3 = obj.top();\n * int param_4 = obj.min();\n */\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.a,{href:"https://www.nowcoder.com/practice/4c776177d2c04c2494f2555c9fcc1e49",children:"\u725b\u5ba2"})}),"\n",(0,s.jsx)(e.p,{children:"\u63cf\u8ff0"}),"\n",(0,s.jsx)(e.p,{children:"\u5b9a\u4e49\u6808\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bf7\u5728\u8be5\u7c7b\u578b\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u80fd\u591f\u5f97\u5230\u6808\u4e2d\u6240\u542b\u6700\u5c0f\u5143\u7d20\u7684 min \u51fd\u6570\uff0c\u8f93\u5165\u64cd\u4f5c\u65f6\u4fdd\u8bc1 pop\u3001top \u548c min \u51fd\u6570\u64cd\u4f5c\u65f6\uff0c\u6808\u4e2d\u4e00\u5b9a\u6709\u5143\u7d20\u3002"}),"\n",(0,s.jsxs)(e.p,{children:["\u6b64\u6808\u5305\u542b\u7684\u65b9\u6cd5\u6709\uff1a",(0,s.jsx)(e.br,{}),"\n","push(value):\u5c06value\u538b\u5165\u6808\u4e2d",(0,s.jsx)(e.br,{}),"\n","pop():\u5f39\u51fa\u6808\u9876\u5143\u7d20",(0,s.jsx)(e.br,{}),"\n","top():\u83b7\u53d6\u6808\u9876\u5143\u7d20",(0,s.jsx)(e.br,{}),"\n","min():\u83b7\u53d6\u6808\u4e2d\u6700\u5c0f\u5143\u7d20"]}),"\n",(0,s.jsx)(e.p,{children:"\u4f7f\u7528 2 \u4e2a\u6808\uff0c\u4e00\u4e2a\u662f\u666e\u901a\u7684\u6808\uff0c\u4e00\u4e2a\u662f\u5b58\u6700\u5c0f\u503c\u7684\u6808\uff0c\u6808\u9876\u8868\u793a\u5f53\u524d\u6700\u5c0f\u503c\u3002\u5f53\u538b\u5165\u65f6\uff0c\u5982\u679c\u65b0\u503c\u5c0f\u4e8e\u6700\u5c0f\u503c\uff0c\u538b\u5165\u65b0\u503c\uff0c\u5426\u5219\u538b\u5165\u6700\u5c0f\u503c\u3002\u5f39\u51fa\u65f6\u4e24\u4e2a\u6808\u540c\u65f6\u5f39\u51fa\u3002"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"\npublic class Solution {\n\n    Deque<Integer> stack = new LinkedList<Integer>();\n    Deque<Integer> min = new LinkedList<Integer>();\n    \n    public void push(int node) {\n        stack.push(node);\n        if(min.size()>0 && min.peek()<node){\n            min.push(min.peek());\n        } else {\n            min.push(node);\n        }\n    }\n    \n    public void pop() {\n        stack.pop();\n        min.pop();\n    }\n    \n    public int top() {\n        return stack.peek();\n    }\n    \n    public int min() {\n        return min.peek();\n    }\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"java.util.Stack \u662f\u4e00\u4e2a\u7c7b\uff0c\u6808\u5e94\u8be5\u4f5c\u4e3a\u4e00\u79cd\u63a5\u53e3\uff0c\u800c\u4e14 Stack \u5e95\u5c42\u662f\u6570\u7ec4\uff0c\u6808\u4e0d\u9700\u8981\u968f\u673a\u8bbf\u95ee\uff0c\u7528\u94fe\u8868\u66f4\u5408\u9002\u3002\u56e0\u6b64\u4e0d\u63a8\u8350\u4f7f\u7528 Stack \uff0c\u63a8\u8350\u7528 java.util.Deque \u4ee3\u66ff\uff0c\u5b9e\u73b0\u7c7b\u53ef\u4ee5\u4f7f\u7528 LinkedList"}),"\n",(0,s.jsx)(e.p,{children:"Deque \u63a5\u53e3\u6587\u6863\uff1a"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"Deques can also be used as LIFO (Last-In-First-Out) stacks. This interface should be used in preference to the legacy Stack class. When a deque is used as a stack, elements are pushed and popped from the beginning of the deque. Stack methods are precisely equivalent to Deque methods as indicated in the table below:\nComparison of Stack and Deque methods\nStack Method\nEquivalent Deque Method\npush(e) addFirst(e)\npop() removeFirst()\npeek() peekFirst()\n"})})]})}function l(n={}){const{wrapper:e}={...(0,c.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}}}]);