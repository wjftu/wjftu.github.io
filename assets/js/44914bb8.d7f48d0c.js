"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[5649],{8453:(e,r,n)=>{n.d(r,{R:()=>l,x:()=>o});var t=n(6540);const i={},a=t.createContext(i);function l(e){const r=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(a.Provider,{value:r},e.children)}},9503:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"algorithmPractice/leetcode/tree","title":"Tree","description":"\u6811\uff0c\u57fa\u672c\u662f\u7528\u9012\u5f52\u6765\u505a\u3002","source":"@site/note/algorithmPractice/leetcode/tree.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/tree","permalink":"/note/algorithmPractice/leetcode/tree","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":-1,"frontMatter":{"sidebar_position":-1},"sidebar":"tutorialSidebar","previous":{"title":"Linked List","permalink":"/note/algorithmPractice/leetcode/linkedlist"},"next":{"title":"1 Two Sum","permalink":"/note/algorithmPractice/leetcode/1"}}');var i=n(4848),a=n(8453);const l={sidebar_position:-1},o="Tree",s={},d=[{value:"94 Binary Tree Inorder Traversal",id:"94-binary-tree-inorder-traversal",level:3},{value:"100 Same Tree",id:"100-same-tree",level:3},{value:"104 Maximum Depth of Binary Tree",id:"104-maximum-depth-of-binary-tree",level:3},{value:"110 Balanced Binary Tree",id:"110-balanced-binary-tree",level:3},{value:"226 Invert Binary Tree",id:"226-invert-binary-tree",level:3},{value:"543 Diameter of Binary Tree",id:"543-diameter-of-binary-tree",level:3},{value:"617 Merge Two Binary Trees",id:"617-merge-two-binary-trees",level:3}];function c(e){const r={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"tree",children:"Tree"})}),"\n",(0,i.jsx)(r.p,{children:"\u6811\uff0c\u57fa\u672c\u662f\u7528\u9012\u5f52\u6765\u505a\u3002"}),"\n",(0,i.jsx)(r.h3,{id:"94-binary-tree-inorder-traversal",children:(0,i.jsx)(r.a,{href:"94",children:"94 Binary Tree Inorder Traversal"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"import java.util.LinkedList;\r\nclass Solution {\r\n    List<Integer> list;\r\n    public List<Integer> inorderTraversal(TreeNode root) {\r\n        \r\n        list=new LinkedList<>();\r\n        if(root==null) return list;\r\n        inOrder(root);\r\n        return list;\r\n    }\r\n    public void inOrder(TreeNode t){\r\n        if(t.left!=null) inOrder(t.left);\r\n        list.add(t.val);\r\n        if(t.right!=null) inOrder(t.right);\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"100-same-tree",children:(0,i.jsx)(r.a,{href:"100",children:"100 Same Tree"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"class Solution {\r\n    public boolean isSameTree(TreeNode p, TreeNode q) {\r\n        if(p==null && q==null) return true;\r\n        if(p==null || q==null) return false;\r\n        return p.val==q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"104-maximum-depth-of-binary-tree",children:(0,i.jsx)(r.a,{href:"104",children:"104 Maximum Depth of Binary Tree"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"class Solution {\r\n    public int maxDepth(TreeNode root) {\r\n        if(root==null) return 0;\r\n        return Math.max(maxDepth(root.left),maxDepth(root.right))+1;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"110-balanced-binary-tree",children:(0,i.jsx)(r.a,{href:"110",children:"110 Balanced Binary Tree"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"class Solution {\r\n    boolean isBal=true;\r\n    public boolean isBalanced(TreeNode root) {\r\n        height(root);\r\n        return isBal;\r\n    }\r\n    \r\n    private int height(TreeNode t){\r\n        if(t==null) return 0;\r\n        int height1=height(t.left);\r\n        int height2=height(t.right);\r\n        if(Math.abs(height1-height2)>1) isBal=false;\r\n        return Math.max(height1,height2)+1;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"226-invert-binary-tree",children:(0,i.jsx)(r.a,{href:"226",children:"226 Invert Binary Tree"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"class Solution {\r\n    public TreeNode invertTree(TreeNode root) {\r\n        if(root==null) return null;\r\n        TreeNode t=root.left;\r\n        root.left=root.right;\r\n        root.right=t;\r\n        invertTree(root.left);\r\n        invertTree(root.right);\r\n        return root;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"543-diameter-of-binary-tree",children:(0,i.jsx)(r.a,{href:"543",children:"543 Diameter of Binary Tree"})}),"\n",(0,i.jsx)(r.p,{children:"\u6700\u5927\u7684\u8ddd\u79bb\u4e3a\u67d0\u4e2a\u8282\u70b9\u7684\u5de6\u5b50\u6811\u6df1\u5ea6\u52a0\u4e0a\u53f3\u5b50\u6811\u6df1\u5ea6"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"class Solution {\r\n    int max=0;\r\n    public int diameterOfBinaryTree(TreeNode root) {\r\n        depth(root);\r\n        return max;\r\n    }\r\n    \r\n    private int depth(TreeNode t){\r\n        if(t==null) return 0;\r\n        int left=depth(t.left);\r\n        int right=depth(t.right);\r\n        max=max>left+right?max:left+right;\r\n        return Math.max(left,right)+1;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"617-merge-two-binary-trees",children:(0,i.jsx)(r.a,{href:"617",children:"617 Merge Two Binary Trees"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"class Solution {\r\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\r\n        if(root1==null && root2==null) return null;\r\n        \r\n        if(root1!=null && root2!=null){\r\n            TreeNode nNode=new TreeNode(root1.val+root2.val);\r\n            nNode.left=mergeTrees(root1.left,root2.left);\r\n            nNode.right=mergeTrees(root1.right,root2.right);\r\n            return nNode;\r\n        }\r\n        return root1==null?root2:root1;\r\n    }\r\n}\n"})})]})}function h(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);