"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[8371],{8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>l});var r=t(6540);const a={},i=r.createContext(a);function s(n){const e=r.useContext(i);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),r.createElement(i.Provider,{value:e},n.children)}},9162:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"algorithmPractice/leetcode/438","title":"438 Find All Anagrams in a String","description":"Leetcode","source":"@site/note/algorithmPractice/leetcode/438.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/438","permalink":"/note/algorithmPractice/leetcode/438","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":438,"frontMatter":{"sidebar_position":438},"sidebar":"tutorialSidebar","previous":{"title":"435 Non-overlapping Intervals","permalink":"/note/algorithmPractice/leetcode/435"},"next":{"title":"450 Delete Node in a BST","permalink":"/note/algorithmPractice/leetcode/450"}}');var a=t(4848),i=t(8453);const s={sidebar_position:438},l="438 Find All Anagrams in a String",o={},c=[];function d(n){const e={a:"a",br:"br",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"438-find-all-anagrams-in-a-string",children:"438 Find All Anagrams in a String"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.a,{href:"https://leetcode.com/problems/find-all-anagrams-in-a-string/",children:"Leetcode"})}),"\n",(0,a.jsx)(e.p,{children:"Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order."}),"\n",(0,a.jsx)(e.p,{children:"An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once."}),"\n",(0,a.jsx)(e.p,{children:"Example 1:"}),"\n",(0,a.jsxs)(e.p,{children:['Input: s = "cbaebabacd", p = "abc"',(0,a.jsx)(e.br,{}),"\n","Output: [0,6]",(0,a.jsx)(e.br,{}),"\n","Explanation:",(0,a.jsx)(e.br,{}),"\n",'The substring with start index = 0 is "cba", which is an anagram of "abc".',(0,a.jsx)(e.br,{}),"\n",'The substring with start index = 6 is "bac", which is an anagram of "abc".']}),"\n",(0,a.jsx)(e.p,{children:"Example 2:"}),"\n",(0,a.jsxs)(e.p,{children:['Input: s = "abab", p = "ab"',(0,a.jsx)(e.br,{}),"\n","Output: [0,1,2]",(0,a.jsx)(e.br,{}),"\n","Explanation:",(0,a.jsx)(e.br,{}),"\n",'The substring with start index = 0 is "ab", which is an anagram of "ab".',(0,a.jsx)(e.br,{}),"\n",'The substring with start index = 1 is "ba", which is an anagram of "ab".',(0,a.jsx)(e.br,{}),"\n",'The substring with start index = 2 is "ab", which is an anagram of "ab".']}),"\n",(0,a.jsx)(e.p,{children:"\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u8ba1\u7b97\u5339\u914d\u5230 p \u5269\u4f59\u6bcf\u4e2a\u5143\u7d20\u7684\u4e2a\u6570\u3002\u4f7f\u7528 l \u548c r \u4e24\u4e2a\u6307\u9488\u5b9a\u4e00\u4e2a\u4e00\u4e2a\u7a97\u53e3\uff0c\u5982\u679c\u53f3\u6307\u9488\u53f3\u8fb9\u7684\u5b57\u7b26\u9700\u8981\u5339\u914d\uff0c\u5219\u79fb\u52a8\u53f3\u6307\u9488\u5e76\u5728\u6570\u7ec4\u4e2d\u5c06\u76f8\u5e94\u7684\u5b57\u7b26\u4e2a\u6570-1\uff0c\u5426\u5219\u79fb\u52a8\u5de6\u6307\u9488\uff0c\u5c06\u9700\u8981\u5339\u914d\u7684\u5b57\u7b26+1\uff0c\u5982\u679c\u5de6\u53f3\u6307\u9488\u957f\u5ea6\u76f8\u5dee p \u7684\u957f\u5ea6\uff0c\u5219\u8bf4\u660e\u6240\u6709\u5b57\u7b26\u90fd\u88ab\u5339\u914d\u5230\uff0c\u5339\u914d\u6b21\u6570+1"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:"class Solution {\n    public List<Integer> findAnagrams(String s, String p) {\n        List<Integer> list=new ArrayList<>();\n        int[] sum=new int[26];\n        for(char c:p.toCharArray()){\n            sum[c-'a']++;\n        }\n        int l=0,r=-1;\n        int lenP=p.length();\n        int lenS=s.length();\n        while(l<lenS){\n            if(r-l+1==lenP){\n                list.add(l);\n            }\n            \n            if(r+1<lenS && sum[s.charAt(r+1)-'a']>0){\n                sum[s.charAt(r+1)-'a']--;\n                r++;\n            } else {\n                sum[s.charAt(l)-'a']++;\n                l++;\n            }\n        }\n        return list;\n    }\n}\n"})})]})}function h(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}}}]);