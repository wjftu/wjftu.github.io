"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[7357],{3165:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"algorithmPractice/leetcode/543","title":"543 Diameter of Binary Tree","description":"LeetCode","source":"@site/note/algorithmPractice/leetcode/543.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/543","permalink":"/note/algorithmPractice/leetcode/543","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":543,"frontMatter":{"sidebar_position":543},"sidebar":"tutorialSidebar","previous":{"title":"540 Single Element in a Sorted Array","permalink":"/note/algorithmPractice/leetcode/540"},"next":{"title":"547 Number of Provinces","permalink":"/note/algorithmPractice/leetcode/547"}}');var o=r(4848),i=r(8453);const a={sidebar_position:543},s="543 Diameter of Binary Tree",c={},h=[];function l(e){const t={a:"a",code:"code",h1:"h1",header:"header",hr:"hr",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"543-diameter-of-binary-tree",children:"543 Diameter of Binary Tree"})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://leetcode.com/problems/diameter-of-binary-tree/",children:"LeetCode"})}),"\n",(0,o.jsx)(t.p,{children:"Given the root of a binary tree, return the length of the diameter of the tree."}),"\n",(0,o.jsx)(t.p,{children:"The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root."}),"\n",(0,o.jsx)(t.p,{children:"The length of a path between two nodes is represented by the number of edges between them."}),"\n",(0,o.jsx)(t.p,{children:"Example 1:"}),"\n",(0,o.jsx)(t.p,{children:"Input: root = [1,2,3,4,5]\r\nOutput: 3\r\nExplanation: 3is the length of the path [4,2,1,3] or [5,2,1,3]."}),"\n",(0,o.jsx)(t.p,{children:"Example 2:"}),"\n",(0,o.jsx)(t.p,{children:"Input: root = [1,2]\r\nOutput: 1"}),"\n",(0,o.jsx)(t.p,{children:"Constraints:"}),"\n",(0,o.jsxs)(t.p,{children:["The number of nodes in the tree is in the range [1, 104].\r\n",(0,o.jsx)(t.code,{children:"-100 <= Node.val <= 100"})]}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsx)(t.p,{children:"\u6700\u5927\u7684\u8ddd\u79bb\u4e3a\u67d0\u4e2a\u8282\u70b9\u7684\u5de6\u5b50\u6811\u6df1\u5ea6\u52a0\u4e0a\u53f3\u5b50\u6811\u6df1\u5ea6"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"class Solution {\r\n    int max=0;\r\n    public int diameterOfBinaryTree(TreeNode root) {\r\n        depth(root);\r\n        return max;\r\n    }\r\n    \r\n    private int depth(TreeNode t){\r\n        if(t==null) return 0;\r\n        int left=depth(t.left);\r\n        int right=depth(t.right);\r\n        max=max>left+right?max:left+right;\r\n        return Math.max(left,right)+1;\r\n    }\r\n}\n"})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>s});var n=r(6540);const o={},i=n.createContext(o);function a(e){const t=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);