"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[3837],{4849:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"algorithmPractice/leetcode/160","title":"160 Intersection of Two Linked Lists","description":"Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.","source":"@site/note/algorithmPractice/leetcode/160.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/160","permalink":"/note/algorithmPractice/leetcode/160","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":160,"frontMatter":{"sidebar_position":160},"sidebar":"tutorialSidebar","previous":{"title":"153 Find Minimum in Rotated Sorted Array","permalink":"/note/algorithmPractice/leetcode/153"},"next":{"title":"162 Find Peak Element","permalink":"/note/algorithmPractice/leetcode/162"}}');var o=n(4848),s=n(8453);const r={sidebar_position:160},a="160 Intersection of Two Linked Lists",l={},d=[];function c(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"160-intersection-of-two-linked-lists",children:"160 Intersection of Two Linked Lists"})}),"\n",(0,o.jsx)(t.p,{children:"Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null."}),"\n",(0,o.jsx)(t.p,{children:"\u4e24\u4e2a\u6307\u9488\u904d\u5386\u94fe\u8868\uff0cA \u94fe\u8868\u7684\u6307\u9488\u904d\u5386\u5b8c\u540e\u4ece B \u94fe\u8868\u7684\u5f00\u5934\u7ee7\u7eed\u904d\u5386\uff0cB \u94fe\u8868\u7684\u6307\u9488\u904d\u5386\u5b8c\u540e\u4ece A \u94fe\u8868\u7684\u5f00\u5934\u7ee7\u7eed\u904d\u5386\u3002\u5982\u679c\u6709\u4ea4\u70b9\uff0c\u4e24\u4e2a\u6307\u9488\u90fd\u4ece\u5934\u904d\u5386\u4e00\u6b21\u540e\u4f1a\u5728\u4ea4\u70b9\u76f8\u9047\u3002\u5982\u679c\u6ca1\u6709\uff0c\u4e24\u4e2a\u6307\u9488\u7b2c\u4e8c\u6b21\u4f1a\u540c\u65f6\u5230\u961f\u5c3e\uff0c\u540c\u65f6\u4e3a null \u3002\u65f6\u95f4\u590d\u6742\u5ea6 O(n) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 O(1)"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"public class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        ListNode p1=headA, p2=headB;\n        while(p1 != p2){\n            p1 = p1 == null ? headB : p1.next;\n            p2 = p2 == null ? headA : p2.next;\n        }\n        return p1;\n    }\n}\n"})}),"\n",(0,o.jsx)(t.p,{children:"\u4e5f\u53ef\u4ee5\u7528 hash \u8868\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 O(n) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 O(n)"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"public class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        ListNode p1=headA, p2=headB;\n        HashSet<ListNode> set=new HashSet<>();\n        while(p1!=null){\n            set.add(p1);\n            p1=p1.next;\n        }\n        while(p2!=null){\n            if(set.contains(p2)) return p2;\n            p2=p2.next;\n        }\n        return null;\n    }\n}\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var i=n(6540);const o={},s=i.createContext(o);function r(e){const t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);