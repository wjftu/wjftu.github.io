"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[9288],{3285:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"algorithmPractice/leetcode/100","title":"100 Same Tree","description":"LeetCode","source":"@site/note/algorithmPractice/leetcode/100.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/100","permalink":"/note/algorithmPractice/leetcode/100","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":100,"frontMatter":{"sidebar_position":100},"sidebar":"tutorialSidebar","previous":{"title":"94 Binary Tree Inorder Traversal","permalink":"/note/algorithmPractice/leetcode/94"},"next":{"title":"104 Maximum Depth of Binary Tree","permalink":"/note/algorithmPractice/leetcode/104"}}');var a=r(4848),o=r(8453);const i={sidebar_position:100},s="100 Same Tree",l={},c=[];function d(e){const t={a:"a",code:"code",h1:"h1",header:"header",hr:"hr",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"100-same-tree",children:"100 Same Tree"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://leetcode.com/problems/same-tree/",children:"LeetCode"})}),"\n",(0,a.jsx)(t.p,{children:"Given the roots of two binary trees p and q, write a function to check if they are the same or not."}),"\n",(0,a.jsx)(t.p,{children:"Two binary trees are considered the same if they are structurally identical, and the nodes have the same value."}),"\n",(0,a.jsx)(t.p,{children:"Example 1:"}),"\n",(0,a.jsx)(t.p,{children:"Input: p = [1,2,3], q = [1,2,3]\r\nOutput: true\r\nExample 2:"}),"\n",(0,a.jsx)(t.p,{children:"Input: p = [1,2], q = [1,null,2]\r\nOutput: false\r\nExample 3:"}),"\n",(0,a.jsx)(t.p,{children:"Input: p = [1,2,1], q = [1,1,2]\r\nOutput: false"}),"\n",(0,a.jsx)(t.p,{children:"Constraints:"}),"\n",(0,a.jsxs)(t.p,{children:["The number of nodes in both trees is in the range [0, 100].\r\n",(0,a.jsx)(t.code,{children:"-104 <= Node.val <= 104"})]}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"class Solution {\r\n    public boolean isSameTree(TreeNode p, TreeNode q) {\r\n        if(p==null && q==null) return true;\r\n        if(p==null || q==null) return false;\r\n        return p.val==q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\r\n    }\r\n}\n"})})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>s});var n=r(6540);const a={},o=n.createContext(a);function i(e){const t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);