"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[527],{8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var r=n(6540);const i={},a=r.createContext(i);function o(e){const t=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:t},e.children)}},8785:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"algorithmPractice/leetcode/240","title":"240 Search a 2D Matrix II","description":"Leetcode","source":"@site/note/algorithmPractice/leetcode/240.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/240","permalink":"/note/algorithmPractice/leetcode/240","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":240,"frontMatter":{"sidebar_position":240},"sidebar":"tutorialSidebar","previous":{"title":"236 Lowest Common Ancestor of a Binary Tree","permalink":"/note/algorithmPractice/leetcode/236"},"next":{"title":"273 Integer to English Words","permalink":"/note/algorithmPractice/leetcode/273"}}');var i=n(4848),a=n(8453);const o={sidebar_position:240},s="240 Search a 2D Matrix II",c={},l=[];function h(e){const t={a:"a",br:"br",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"240-search-a-2d-matrix-ii",children:"240 Search a 2D Matrix II"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://leetcode.com/problems/search-a-2d-matrix-ii/",children:"Leetcode"})}),"\n",(0,i.jsx)(t.p,{children:"Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:"}),"\n",(0,i.jsxs)(t.p,{children:["Integers in each row are sorted in ascending from left to right.",(0,i.jsx)(t.br,{}),"\n","Integers in each column are sorted in ascending from top to bottom."]}),"\n",(0,i.jsx)(t.p,{children:"Example 1:"}),"\n",(0,i.jsxs)(t.p,{children:["Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5",(0,i.jsx)(t.br,{}),"\n","Output: true"]}),"\n",(0,i.jsx)(t.p,{children:"Example 2:"}),"\n",(0,i.jsxs)(t.p,{children:["Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20",(0,i.jsx)(t.br,{}),"\n","Output: false"]}),"\n",(0,i.jsx)(t.p,{children:"\u4ece\u53f3\u4e0a\u89d2\u5f80\u5de6\u4e0b\u89d2\u904d\u5386\uff0c\u5982\u679c\u5f53\u524d\u7684\u6570\u5927\u4e8e target\uff0c\u5219\u5f80\u5de6\u79fb\u52a8\uff0c\u56e0\u4e3a\u6240\u6709\u5c0f\u4e8e\u5f53\u524d\u6570\u7684\u6570\u5b57\u90fd\u5728\u5de6\u8fb9\uff0c\u540c\u7406\u5982\u679c\u5f53\u524d\u6570\u5c0f\u4e8e target \u5219\u5f80\u4e0b\u79fb\u52a8\u3002\u79fb\u51fa\u53bb\u4e86\u8bf4\u660e\u6ca1\u6709\u627e\u5230\u3002"}),"\n",(0,i.jsx)(t.p,{children:"\u65f6\u95f4\u590d\u6742\u5ea6 o(n) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 o(1)"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"public boolean searchMatrix(int[][] matrix, int target) {\n    if(matrix==null || matrix.length==0 || matrix[0].length==0) return false;\n    int width=matrix[0].length;\n    int height=matrix.length;\n    int i=0;\n    int j=width-1;\n    while(i<height && j>=0){\n        int cur=matrix[i][j];\n        if(cur>target){\n            j--;\n        } else if(cur<target){\n            i++;\n        } else {\n            return true;\n        }\n    }\n    return false;\n}\n"})})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);