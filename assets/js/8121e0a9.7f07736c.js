"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[2108],{879:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"algorithmPractice/leetcode/200","title":"200 Number of Islands","description":"Leetcode","source":"@site/note/algorithmPractice/leetcode/200.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/200","permalink":"/note/algorithmPractice/leetcode/200","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":200,"frontMatter":{"sidebar_position":200},"sidebar":"tutorialSidebar","previous":{"title":"198 House Robber","permalink":"/note/algorithmPractice/leetcode/198"},"next":{"title":"206 Reverse Linked List","permalink":"/note/algorithmPractice/leetcode/206"}}');var t=i(4848),d=i(8453);const s={sidebar_position:200},o="200 Number of Islands",a={},c=[];function l(n){const e={a:"a",br:"br",code:"code",h1:"h1",header:"header",hr:"hr",p:"p",pre:"pre",...(0,d.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"200-number-of-islands",children:"200 Number of Islands"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://leetcode.com/problems/number-of-islands/",children:"Leetcode"})}),"\n",(0,t.jsx)(e.p,{children:"Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands."}),"\n",(0,t.jsx)(e.p,{children:"An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water."}),"\n",(0,t.jsx)(e.p,{children:"Example 1:"}),"\n",(0,t.jsxs)(e.p,{children:["Input: grid = [",(0,t.jsx)(e.br,{}),"\n",'["1","1","1","1","0"],',(0,t.jsx)(e.br,{}),"\n",'["1","1","0","1","0"],',(0,t.jsx)(e.br,{}),"\n",'["1","1","0","0","0"],',(0,t.jsx)(e.br,{}),"\n",'["0","0","0","0","0"]',(0,t.jsx)(e.br,{}),"\n","]",(0,t.jsx)(e.br,{}),"\n","Output: 1"]}),"\n",(0,t.jsx)(e.p,{children:"Example 2:"}),"\n",(0,t.jsxs)(e.p,{children:["Input: grid = [",(0,t.jsx)(e.br,{}),"\n",'["1","1","0","0","0"],',(0,t.jsx)(e.br,{}),"\n",'["1","1","0","0","0"],',(0,t.jsx)(e.br,{}),"\n",'["0","0","1","0","0"],',(0,t.jsx)(e.br,{}),"\n",'["0","0","0","1","1"]',(0,t.jsx)(e.br,{}),"\n","]",(0,t.jsx)(e.br,{}),"\n","Output: 3"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.p,{children:"\u904d\u5386\u5230\u662f\u9646\u5730\u7684\u70b9\uff0c\u8ba1\u6570\uff0c\u5c06\u5176\u8f6c\u4e3a\u6d77\u6d0b\uff0c\u5bf9\u5176\u76f8\u90bb\u7684\u70b9\u8fdb\u884c\u9012\u5f52\uff08\u6df1\u5ea6\u6216\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff09"}),"\n",(0,t.jsx)(e.p,{children:"deepth first search \u7248\u672c\uff0c\u6bd4\u8f83\u5feb"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"class Solution {\n    public int numIslands(char[][] grid) {\n        int count=0;\n        for(int i=0;i<grid.length;++i){\n            for(int j=0;j<grid[0].length;++j){\n                if(grid[i][j]=='1') {\n                    remove(grid, i, j);\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    \n    private void remove(char[][] grid, int i, int j){\n        grid[i][j]='0';\n        if(i+1<grid.length && grid[i+1][j]=='1') remove(grid, i+1, j);\n        if(i-1>=0 && grid[i-1][j]=='1') remove(grid, i-1, j);\n        if(j+1<grid[0].length && grid[i][j+1]=='1') remove(grid, i, j+1);\n        if(j-1>=0 && grid[i][j-1]=='1') remove(grid, i, j-1);\n    }\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"broadth first search \u7248\u672c\uff0c\u8981\u6162\u4e00\u4e9b"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"class Solution {\n    public int numIslands(char[][] grid) {\n        if(grid==null || grid.length==0 || grid[0].length==0) return 0;\n        int height=grid.length;\n        int width=grid[0].length;\n        int count=0;\n        for(int i=0;i<height;++i){\n            for(int j=0;j<width;++j){\n                if(grid[i][j]=='1'){\n                    count++;\n                    Queue<int[]> queue=new LinkedList<>();\n                    queue.add(new int[]{i,j});\n                    grid[i][j]='0';\n                    bfs(grid,queue);\n                }\n            }\n        }\n        return count;\n        \n    }\n    \n    private void bfs(char[][] grid, Queue<int[]> queue){\n        \n        while(!queue.isEmpty()){\n            int size = queue.size();\n            for(int k=0;k<size;++k){\n                int[] arr=queue.poll();\n                int i=arr[0];\n                int j=arr[1];\n                if(i-1>=0 && grid[i-1][j]=='1'){\n                    queue.add(new int[]{i-1,j});\n                    grid[i-1][j]='0';\n                } \n                if(j-1>=0 && grid[i][j-1]=='1') {\n                    queue.add(new int[]{i,j-1});\n                    grid[i][j-1]='0';\n                }\n                if(i+1<grid.length && grid[i+1][j]=='1') {\n                    queue.add(new int[]{i+1,j});\n                    grid[i+1][j]='0';\n                }\n                if(j+1<grid[i].length && grid[i][j+1]=='1') {\n                    queue.add(new int[]{i,j+1});                \n                    grid[i][j+1]='0';\n                }\n            }\n        }    \n    }\n}\n"})})]})}function u(n={}){const{wrapper:e}={...(0,d.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(l,{...n})}):l(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>s,x:()=>o});var r=i(6540);const t={},d=r.createContext(t);function s(n){const e=r.useContext(d);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:s(n.components),r.createElement(d.Provider,{value:e},n.children)}}}]);