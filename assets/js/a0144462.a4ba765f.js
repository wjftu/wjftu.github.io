"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[4063],{2856:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"algorithmPractice/leetcode/173","title":"173 Binary Search Tree Iterator","description":"Leetcode","source":"@site/note/algorithmPractice/leetcode/173.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/173","permalink":"/note/algorithmPractice/leetcode/173","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":173,"frontMatter":{"sidebar_position":173},"sidebar":"tutorialSidebar","previous":{"title":"171 Excel Sheet Column Number","permalink":"/note/algorithmPractice/leetcode/171"},"next":{"title":"198 House Robber","permalink":"/note/algorithmPractice/leetcode/198"}}');var o=r(4848),a=r(8453);const s={sidebar_position:173},i="173 Binary Search Tree Iterator",l={},c=[];function h(e){const t={a:"a",br:"br",code:"code",h1:"h1",header:"header",hr:"hr",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"173-binary-search-tree-iterator",children:"173 Binary Search Tree Iterator"})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://leetcode.com/problems/binary-search-tree-iterator/",children:"Leetcode"})}),"\n",(0,o.jsx)(t.p,{children:"Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):"}),"\n",(0,o.jsx)(t.p,{children:"BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST."}),"\n",(0,o.jsx)(t.p,{children:"boolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false."}),"\n",(0,o.jsx)(t.p,{children:"int next() Moves the pointer to the right, then returns the number at the pointer."}),"\n",(0,o.jsx)(t.p,{children:"Notice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST."}),"\n",(0,o.jsx)(t.p,{children:"You may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called."}),"\n",(0,o.jsx)(t.p,{children:"Example 1:"}),"\n",(0,o.jsxs)(t.p,{children:["Input",(0,o.jsx)(t.br,{}),"\n",'["BSTIterator", "next", "next", "hasNext", "next", "hasNext", "next", "hasNext", "next", "hasNext"]',(0,o.jsx)(t.br,{}),"\n","[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]",(0,o.jsx)(t.br,{}),"\n","Output",(0,o.jsx)(t.br,{}),"\n","[null, 3, 7, true, 9, true, 15, true, 20, false]"]}),"\n",(0,o.jsxs)(t.p,{children:["Explanation",(0,o.jsx)(t.br,{}),"\n","BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);",(0,o.jsx)(t.br,{}),"\n","bSTIterator.next();    // return 3",(0,o.jsx)(t.br,{}),"\n","bSTIterator.next();    // return 7",(0,o.jsx)(t.br,{}),"\n","bSTIterator.hasNext(); // return True",(0,o.jsx)(t.br,{}),"\n","bSTIterator.next();    // return 9",(0,o.jsx)(t.br,{}),"\n","bSTIterator.hasNext(); // return True",(0,o.jsx)(t.br,{}),"\n","bSTIterator.next();    // return 15",(0,o.jsx)(t.br,{}),"\n","bSTIterator.hasNext(); // return True",(0,o.jsx)(t.br,{}),"\n","bSTIterator.next();    // return 20",(0,o.jsx)(t.br,{}),"\n","bSTIterator.hasNext(); // return False"]}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsx)(t.p,{children:"\u65b9\u6cd5\u4e00\uff1a"}),"\n",(0,o.jsx)(t.p,{children:"\u76f4\u63a5\u505a\u6210\u961f\u5217\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 o(n)"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"class BSTIterator {\n    \n    Queue<Integer> queue;\n\n    public BSTIterator(TreeNode root) {\n        queue = new LinkedList<>();\n        inOrder(root);\n    }\n    \n    private void inOrder(TreeNode root){\n        if(root==null) return;\n        inOrder(root.left);\n        queue.add(root.val);\n        inOrder(root.right);\n    }\n    \n    public int next() {\n        return queue.poll();\n    }\n    \n    public boolean hasNext() {\n        return !queue.isEmpty();\n    }\n}\n"})}),"\n",(0,o.jsx)(t.p,{children:"\u65b9\u6cd5\u4e8c\uff1a"}),"\n",(0,o.jsx)(t.p,{children:"\u4f7f\u7528\u4e00\u4e2a\u6808\uff0c\u628a\u6240\u6709\u5de6\u5b50\u6811\u538b\u5165\u6808\u3002\u5f39\u51fa\u7684\u65f6\u5019\uff0c\u5982\u679c\u53f3\u5b50\u6811\u4e0d\u4e3a\u7a7a\uff0c\u5219\u628a\u53f3\u5b50\u6811\u53ca\u5176\u6240\u6709\u5de6\u5b50\u6811\uff0c\u548c\u5de6\u5b50\u6811\u7684\u5de6\u5b50\u6811\uff0c\u548c\u5de6\u5b50\u6811\u7684\u5de6\u5b50\u6811\u7684\u5de6\u5b50\u6811\u7b49\u7b49\uff0c\u90fd\u8981\u5165\u6808\u3002\u5982\u679c\u53f3\u5b50\u6811\u4e3a\u7a7a\uff0c\u5219\u8981\u8fd4\u56de\u5230\u4e0a\u4e00\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u662f\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684\u53f3\u5b50\u6811\uff0c\u5219\u4e0d\u65ad\u8fd4\u56de\u3002\u7a7a\u95f4\u590d\u6742\u5ea6\u6700\u5dee\u4e3a o(n) \uff0c\u5e73\u5747 o(log n)\u3002"}),"\n",(0,o.jsx)(t.p,{children:"\u6309\u7406\u8bf4\u65b9\u6cd5\u4e00\u5e94\u8be5\u66f4\u5feb\uff0c\u4f46\u66f4\u8d39\u7a7a\u95f4\uff0c\u4f46\u5b9e\u9645\u4e0a leetcode \u6d4b\u8bd5\u7684\u7ed3\u679c\u662f\u76f8\u53cd\u7684\u3002"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"class BSTIterator {\n    \n    Deque<TreeNode> stack;\n\n    public BSTIterator(TreeNode root) {\n        stack=new LinkedList<>();\n        while(root!=null){\n            stack.push(root);\n            root=root.left;\n        }\n    }\n    \n    public int next() {\n        TreeNode cur=stack.peek();\n        int val=cur.val;\n        if(cur.right!=null){\n            TreeNode right=cur.right;\n            stack.pop();\n            while(right!=null){\n                stack.push(right);\n                right=right.left;\n            }\n        } else {\n            stack.pop();\n            TreeNode t=stack.peek();\n            while(t!=null && t.right==cur){\n                stack.pop();\n                t=stack.peek();\n            }\n        }\n        return val;\n    }\n    \n    public boolean hasNext() {\n        return !stack.isEmpty();\n    }\n}\n\n"})})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>i});var n=r(6540);const o={},a=n.createContext(o);function s(e){const t=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);