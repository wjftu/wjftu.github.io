"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[3844],{5757:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"algorithmPractice/leetcode/94","title":"94 Binary Tree Inorder Traversal","description":"LeetCode","source":"@site/note/algorithmPractice/leetcode/94.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/94","permalink":"/note/algorithmPractice/leetcode/94","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":94,"frontMatter":{"sidebar_position":94},"sidebar":"tutorialSidebar","previous":{"title":"84 Largest Rectangle in Histogram","permalink":"/note/algorithmPractice/leetcode/84"},"next":{"title":"100 Same Tree","permalink":"/note/algorithmPractice/leetcode/100"}}');var i=n(4848),o=n(8453);const s={sidebar_position:94},l="94 Binary Tree Inorder Traversal",a={},c=[];function d(e){const r={a:"a",code:"code",h1:"h1",header:"header",hr:"hr",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"94-binary-tree-inorder-traversal",children:"94 Binary Tree Inorder Traversal"})}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.a,{href:"https://leetcode.com/problems/binary-tree-inorder-traversal/",children:"LeetCode"})}),"\n",(0,i.jsx)(r.p,{children:"Given the root of a binary tree, return the inorder traversal of its nodes' values."}),"\n",(0,i.jsx)(r.p,{children:"Example 1:"}),"\n",(0,i.jsx)(r.p,{children:"Input: root = [1,null,2,3]\r\nOutput: [1,3,2]"}),"\n",(0,i.jsx)(r.p,{children:"Example 2:"}),"\n",(0,i.jsx)(r.p,{children:"Input: root = []\r\nOutput: []"}),"\n",(0,i.jsx)(r.p,{children:"Example 3:"}),"\n",(0,i.jsx)(r.p,{children:"Input: root = [1]\r\nOutput: [1]"}),"\n",(0,i.jsx)(r.p,{children:"Example 4:"}),"\n",(0,i.jsx)(r.p,{children:"Input: root = [1,2]\r\nOutput: [2,1]"}),"\n",(0,i.jsx)(r.p,{children:"Example 5:"}),"\n",(0,i.jsx)(r.p,{children:"Input: root = [1,null,2]\r\nOutput: [1,2]"}),"\n",(0,i.jsx)(r.p,{children:"Constraints:"}),"\n",(0,i.jsxs)(r.p,{children:["The number of nodes in the tree is in the range [0, 100].\r\n",(0,i.jsx)(r.code,{children:"-100 <= Node.val <= 100"})]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.p,{children:"\u5f88\u7b80\u5355\uff0c\u5efa\u4e00\u4e2a List \uff0c\u4e2d\u5e8f\u904d\u5386\u65f6\u52a0\u5165 List \u5373\u53ef"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"import java.util.LinkedList;\r\nclass Solution {\r\n    List<Integer> list;\r\n    public List<Integer> inorderTraversal(TreeNode root) {\r\n        \r\n        list=new LinkedList<>();\r\n        if(root==null) return list;\r\n        inOrder(root);\r\n        return list;\r\n    }\r\n    public void inOrder(TreeNode t){\r\n        if(t.left!=null) inOrder(t.left);\r\n        list.add(t.val);\r\n        if(t.right!=null) inOrder(t.right);\r\n    }\r\n}\n"})})]})}function p(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>l});var t=n(6540);const i={},o=t.createContext(i);function s(e){const r=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);