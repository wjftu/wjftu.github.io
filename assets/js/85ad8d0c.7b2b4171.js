"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[3134],{1667:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"algorithmPractice/leetcode/16","title":"16 3Sum Closest","description":"Leetcode","source":"@site/note/algorithmPractice/leetcode/16.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/16","permalink":"/note/algorithmPractice/leetcode/16","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":16,"frontMatter":{"sidebar_position":16},"sidebar":"tutorialSidebar","previous":{"title":"15 3Sum","permalink":"/note/algorithmPractice/leetcode/15"},"next":{"title":"17 Letter Combinations of a Phone Number","permalink":"/note/algorithmPractice/leetcode/17"}}');var s=t(4848),i=t(8453);const o={sidebar_position:16},a="16 3Sum Closest",c={},u=[];function l(e){const n={a:"a",br:"br",code:"code",h1:"h1",header:"header",hr:"hr",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"16-3sum-closest",children:"16 3Sum Closest"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/3sum-closest/",children:"Leetcode"})}),"\n",(0,s.jsx)(n.p,{children:"Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target."}),"\n",(0,s.jsx)(n.p,{children:"Return the sum of the three integers."}),"\n",(0,s.jsx)(n.p,{children:"You may assume that each input would have exactly one solution."}),"\n",(0,s.jsx)(n.p,{children:"Example 1:"}),"\n",(0,s.jsxs)(n.p,{children:["Input: nums = [-1,2,1,-4], target = 1",(0,s.jsx)(n.br,{}),"\n","Output: 2",(0,s.jsx)(n.br,{}),"\n","Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2)."]}),"\n",(0,s.jsx)(n.p,{children:"Example 2:"}),"\n",(0,s.jsxs)(n.p,{children:["Input: nums = [0,0,0], target = 1",(0,s.jsx)(n.br,{}),"\n","Output: 0"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"\u548c 3 sum \u7c7b\u4f3c\uff0c\u6392\u5e8f\u540e\u56fa\u5b9a\u4e00\u4e2a\u70b9\uff0c\u53e6\u5916\u4e24\u4e2a\u6307\u9488\u79fb\u52a8\u3002\u5982\u679c\u5f53\u524d\u7684\u548c\u548c target \u76f8\u5dee\u6700\u5c0f\uff0c\u66f4\u65b0\u6700\u5c0f\u8bb0\u5f55\u3002\u5982\u679c\u76f8\u5dee 0 \uff0c\u8bf4\u660e\u5df2\u7ecf\u547d\u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\u3002"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public int threeSumClosest(int[] nums, int target) {\n    Arrays.sort(nums);\n    int left,right;\n    int min=Integer.MAX_VALUE;\n    int res=0;\n    for(int i=0;i<nums.length-2;++i){\n        left=i+1;\n        right=nums.length-1;\n        int remain=target-nums[i];\n        while(left<right){\n            int sum=nums[left]+nums[right];\n            if(sum>remain){\n                if(sum-remain<min) {\n                    min=sum-remain;\n                    res=sum+nums[i];\n                }\n                right--;\n            } else if(sum<remain){\n                if(remain-sum<min) {\n                    min=remain-sum;\n                    res=sum+nums[i];\n                }\n                left++;\n            } else {\n                return sum+nums[i];\n            }\n        }\n    }\n    return res;\n}\n"})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);