"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[7793],{7146:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"algorithmPractice/leetcode/211","title":"211 Design Add and Search Words Data Structure","description":"Design a data structure that supports adding new words and finding if a string matches any previously added string.","source":"@site/note/algorithmPractice/leetcode/211.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/211","permalink":"/note/algorithmPractice/leetcode/211","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":211,"frontMatter":{"sidebar_position":211},"sidebar":"tutorialSidebar","previous":{"title":"209 Minimum Size Subarray Sum","permalink":"/note/algorithmPractice/leetcode/209"},"next":{"title":"213 House Robber II","permalink":"/note/algorithmPractice/leetcode/213"}}');var a=t(4848),s=t(8453);const i={sidebar_position:211},d="211 Design Add and Search Words Data Structure",o={},c=[];function l(e){const n={br:"br",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"211-design-add-and-search-words-data-structure",children:"211 Design Add and Search Words Data Structure"})}),"\n",(0,a.jsx)(n.p,{children:"Design a data structure that supports adding new words and finding if a string matches any previously added string."}),"\n",(0,a.jsx)(n.p,{children:"Implement the WordDictionary class:"}),"\n",(0,a.jsxs)(n.p,{children:["WordDictionary() Initializes the object.",(0,a.jsx)(n.br,{}),"\n","void addWord(word) Adds word to the data structure, it can be matched later.",(0,a.jsx)(n.br,{}),"\n","bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter."]}),"\n",(0,a.jsx)(n.p,{children:"Example:"}),"\n",(0,a.jsxs)(n.p,{children:["Input",(0,a.jsx)(n.br,{}),"\n",'["WordDictionary","addWord","addWord","addWord","search","search","search","search"]',(0,a.jsx)(n.br,{}),"\n",'[[],["bad"],["dad"],["mad"],["pad"],["bad"],[".ad"],["b.."]]',(0,a.jsx)(n.br,{}),"\n","Output",(0,a.jsx)(n.br,{}),"\n","[null,null,null,null,false,true,true,true]"]}),"\n",(0,a.jsxs)(n.p,{children:["\u5982\u679c\u957f\u5ea6\u4e0d\u540c\u80af\u5b9a\u4e0d\u540c\u3002\u6309\u957f\u5ea6\u7ed9\u8bcd\u5178\u5206\u7c7b\u3002\u628a\u5355\u8bcd\u653e\u5230\u76f8\u5e94\u957f\u5ea6\u7684 set \u91cc\u9762\u3002\u67e5\u627e\u7684\u65f6\u5019\u6839\u636e\u957f\u5ea6\u627e\u5230 set \uff0c\u5c1d\u8bd5\u4ece set \u91cc\u9762\u627e\uff0c\u5982\u679c\u627e\u4e0d\u5230\uff0c\u4f7f\u7528 isSame \u65b9\u6cd5\u67e5\u627e\u662f\u5426\u6709\u542b\u6709 ",(0,a.jsx)(n.code,{children:"."})," \u7684\u5339\u914d\u7ed3\u679c\u3002"]}),"\n",(0,a.jsxs)(n.p,{children:["Runtime: 33 ms, faster than 99.89% of Java online submissions for Design Add and Search Words Data Structure.",(0,a.jsx)(n.br,{}),"\n","Memory Usage: 53 MB, less than 50.29% of Java online submissions for Design Add and Search Words Data Structure."]}),"\n",(0,a.jsx)(n.p,{children:"\u8dd1\u51fa\u6765\u7684\u7ed3\u679c\u633a\u4e0d\u9519\uff0c\u4e0d\u77e5\u9053\u6709\u6ca1\u6709\u66f4\u597d\u7684\u89e3\u6cd5\u3002"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"class WordDictionary {\n    \n    HashMap<Integer, HashSet<String>> map=new HashMap<>();\n\n    public WordDictionary() {\n        \n    }\n    \n    public void addWord(String word) {\n        int len=word.length();\n        if(!map.containsKey(len)){\n            HashSet<String> set=new HashSet<>();\n            set.add(word);\n            map.put(len,set);\n        } else {\n            map.get(len).add(word);\n        }\n    }\n    \n    public boolean search(String word) {\n        int len=word.length();\n        HashSet<String> set=map.get(len);\n        if(set==null) return false;\n        if(set.contains(word)) return true;\n        for(String s:set){\n            if(isSame(s, word)) return true;\n        }\n        return false;\n    }\n    \n    private boolean isSame(String s1, String s2){\n        for(int i=0;i<s1.length();++i){\n            if(s1.charAt(i)!=s2.charAt(i) && s2.charAt(i)!='.') return false;\n        }\n        return true;\n    }\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>d});var r=t(6540);const a={},s=r.createContext(a);function i(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);