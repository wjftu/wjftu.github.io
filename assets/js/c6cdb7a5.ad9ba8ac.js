"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[6042],{1042:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"algorithmPractice/leetcode/38","title":"38 Count and Say","description":"Leetcode","source":"@site/note/algorithmPractice/leetcode/38.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/38","permalink":"/note/algorithmPractice/leetcode/38","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":38,"frontMatter":{"sidebar_position":38},"sidebar":"tutorialSidebar","previous":{"title":"37 Sudoku Solver","permalink":"/note/algorithmPractice/leetcode/37"},"next":{"title":"39 Combination Sum","permalink":"/note/algorithmPractice/leetcode/39"}}');var i=t(4848),o=t(8453);const s={sidebar_position:38},a="38 Count and Say",c={},d=[];function u(n){const e={a:"a",br:"br",code:"code",h1:"h1",header:"header",hr:"hr",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"38-count-and-say",children:"38 Count and Say"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://leetcode.com/problems/count-and-say/",children:"Leetcode"})}),"\n",(0,i.jsx)(e.p,{children:"The count-and-say sequence is a sequence of digit strings defined by the recursive formula:"}),"\n",(0,i.jsxs)(e.p,{children:['countAndSay(1) = "1"',(0,i.jsx)(e.br,{}),"\n",'countAndSay(n) is the way you would "say" the digit string from countAndSay(n-1), which is then converted into a different digit string.',(0,i.jsx)(e.br,{}),"\n",'To determine how you "say" a digit string, split it into the minimal number of groups so that each group is a contiguous section all of the same character. Then for each group, say the number of characters, then say the character. To convert the saying into a digit string, replace the counts with a number and concatenate every saying.']}),"\n",(0,i.jsx)(e.p,{children:'For example, the saying and conversion for digit string "3322251":'}),"\n",(0,i.jsx)(e.p,{children:"Given a positive integer n, return the nth term of the count-and-say sequence."}),"\n",(0,i.jsx)(e.p,{children:"Example 1:"}),"\n",(0,i.jsxs)(e.p,{children:["Input: n = 1",(0,i.jsx)(e.br,{}),"\n",'Output: "1"',(0,i.jsx)(e.br,{}),"\n","Explanation: This is the base case."]}),"\n",(0,i.jsx)(e.p,{children:"Example 2:"}),"\n",(0,i.jsxs)(e.p,{children:["Input: n = 4",(0,i.jsx)(e.br,{}),"\n",'Output: "1211"',(0,i.jsx)(e.br,{}),"\n","Explanation:",(0,i.jsx)(e.br,{}),"\n",'countAndSay(1) = "1"',(0,i.jsx)(e.br,{}),"\n",'countAndSay(2) = say "1" = one 1 = "11"',(0,i.jsx)(e.br,{}),"\n",'countAndSay(3) = say "11" = two 1\'s = "21"',(0,i.jsx)(e.br,{}),"\n",'countAndSay(4) = say "21" = one 2 + one 1 = "12" + "11" = "1211"']}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.p,{children:'\u7b2c\u4e00\u4e2a\u8fd4\u56de\u7684\u662f "1" \uff0c\u540e\u9762\u7684\u53ef\u4ee5\u6839\u636e\u524d\u9762\u7684\u751f\u6210\uff0c\u5199\u4e00\u4e2a\u751f\u6210\u51fd\u6570\u4e0d\u65ad\u8c03\u7528\u5b83\u751f\u6210\u4e0b\u4e00\u4e2a\u3002'}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'class Solution {\n    public String countAndSay(int n) {\n        if(n==1) return "1";\n        String pre="1";\n        String cur=pre;\n        for(int i=2;i<=n;++i){\n            cur=next(pre);\n            pre=cur;\n        }\n        return cur;\n            \n\n    }\n    \n    private String next(String s){\n        int index=-1;\n        StringBuilder sb=new StringBuilder();\n        while(index+1<s.length()){\n            int i=index+1;\n            int count=1;\n            char c=s.charAt(i);\n            while(i+1<s.length() && c==s.charAt(i+1)){\n                i++;\n                count++;\n            }\n            sb.append(count).append(c);\n            index=i;\n        }\n        return sb.toString();\n    }\n}\n'})})]})}function l(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(u,{...n})}):u(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>a});var r=t(6540);const i={},o=r.createContext(i);function s(n){const e=r.useContext(o);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),r.createElement(o.Provider,{value:e},n.children)}}}]);