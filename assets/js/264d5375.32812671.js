"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[6155],{7350:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>s});const o=JSON.parse('{"id":"algorithmPractice/leetcode/37","title":"37 Sudoku Solver","description":"Leetcode","source":"@site/note/algorithmPractice/leetcode/37.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/37","permalink":"/note/algorithmPractice/leetcode/37","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":37,"frontMatter":{"sidebar_position":37},"sidebar":"tutorialSidebar","previous":{"title":"36 Valid Sudoku","permalink":"/note/algorithmPractice/leetcode/36"},"next":{"title":"38 Count and Say","permalink":"/note/algorithmPractice/leetcode/38"}}');var t=r(4848),i=r(8453);const a={sidebar_position:37},c="37 Sudoku Solver",l={},s=[];function d(e){const n={a:"a",br:"br",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"37-sudoku-solver",children:"37 Sudoku Solver"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/valid-sudoku/",children:"Leetcode"})}),"\n",(0,t.jsx)(n.p,{children:"Write a program to solve a Sudoku puzzle by filling the empty cells."}),"\n",(0,t.jsx)(n.p,{children:"A sudoku solution must satisfy all of the following rules:"}),"\n",(0,t.jsxs)(n.p,{children:["Each of the digits 1-9 must occur exactly once in each row.",(0,t.jsx)(n.br,{}),"\n","Each of the digits 1-9 must occur exactly once in each column.",(0,t.jsx)(n.br,{}),"\n","Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.",(0,t.jsx)(n.br,{}),"\n","The '.' character indicates empty cells."]}),"\n",(0,t.jsx)(n.p,{children:"\u5224\u65ad\u6570\u72ec\u662f\u5426\u6709\u6548\u7684\u65b9\u6cd5\u4f7f\u7528 Leetcode 36 \u9898\u7684\u65b9\u6cd5\u3002\u4f7f\u7528\u9012\u5f52\uff0c\u5982\u679c\u4e00\u4e2a\u683c\u5b50\u4e3a\u7a7a\uff0c\u5c1d\u8bd5\u653e\u7f6e 1-9 \uff0c\u5982\u679c\u53ef\u4ee5\u653e\u7f6e\uff0c\u5219\u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u7a7a\u683c\uff0c\u5c1d\u8bd5\u540c\u6837\u7684\u64cd\u4f5c\u3002\u5982\u679c 1-9 \u90fd\u4e0d\u884c\uff0c\u6e05\u7a7a\u683c\u5b50\uff0c\u8fd4\u56de false \u5230\u4e0a\u4e00\u7ea7\u3002\u5982\u679c\u5168\u90e8\u683c\u5b50\u586b\u6ee1\uff0c\u4e00\u5c42\u4e00\u5c42\u8fd4\u56de true \uff0c\u8df3\u51fa\u9012\u5f52\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public void solveSudoku(char[][] board) {\n        solve(board, 0, 0); \n    }\n    \n    private boolean solve(char[][] board, int i, int j){\n        if(i==9 && j==0) return true;\n        char now = board[i][j];\n        if(now=='.'){\n            for(char c='1';c<='9';++c){\n                board[i][j] = c;\n                if(isRowValid(board, i) &&\n                    isColValid(board, j) &&\n                    isBlockValid(board, i, j)){\n                    int ii = j+1==9 ? i+1:i;\n                    int jj = j+1==9 ? 0:j+1;\n\n                    if( solve(board, ii, jj) ) return true;\n                }    \n            }\n            board[i][j] = '.';\n            return false;\n        }\n        \n        return j+1==9 ? solve(board,i+1,0) : solve(board, i, j+1);\n    }\n    \n    \n    \n    \n    \n    private boolean isRowValid(char[][] board, int row){\n        boolean[] arr=new boolean[9];\n        for(int j=0;j<9;++j){\n            char c = board[row][j];\n            if(c>='1' && c<='9'){\n                int val = c-'1';\n                if(arr[val]) return false;\n                arr[val] = true;\n            }\n        }\n        return true;\n    }\n    \n    private boolean isColValid(char[][] board, int col){\n        boolean[] arr=new boolean[9];\n        for(int i=0;i<9;++i){\n            char c = board[i][col];\n            if(c>='1' && c<='9'){\n                int val = c-'1';\n                if(arr[val]) return false;\n                arr[val] = true;\n            }\n        }\n        return true;\n    }\n    \n    private boolean isBlockValid(char[][] board, int i, int j){\n        int row=i/3*3;\n        int col=j/3*3;\n        boolean[] arr=new boolean[9];\n        for(int ii=0;ii<3;ii++){\n            for(int jj=0;jj<3;jj++){\n                char c=board[row+ii][col+jj];\n                if(c>='1' && c<='9'){\n                    int val = c-'1';\n                    if(arr[val]) return false;\n                    arr[val] = true;\n                }\n            }\n        }\n        return true;         \n    }\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>c});var o=r(6540);const t={},i=o.createContext(t);function a(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);