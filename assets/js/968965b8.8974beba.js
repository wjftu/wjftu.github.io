"use strict";(self.webpackChunkwjftu_ds=self.webpackChunkwjftu_ds||[]).push([[9254],{8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var r=n(6540);const i={},s=r.createContext(i);function a(e){const t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:t},e.children)}},8786:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"algorithmPractice/leetcode/704","title":"704 Binary Search","description":"LeetCode","source":"@site/note/algorithmPractice/leetcode/704.md","sourceDirName":"algorithmPractice/leetcode","slug":"/algorithmPractice/leetcode/704","permalink":"/note/algorithmPractice/leetcode/704","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":704,"frontMatter":{"sidebar_position":704},"sidebar":"tutorialSidebar","previous":{"title":"701 Insert into a Binary Search Tree","permalink":"/note/algorithmPractice/leetcode/701"},"next":{"title":"713 Subarray Product Less Than K","permalink":"/note/algorithmPractice/leetcode/713"}}');var i=n(4848),s=n(8453);const a={sidebar_position:704},o="704 Binary Search",c={},l=[];function d(e){const t={a:"a",br:"br",code:"code",h1:"h1",header:"header",hr:"hr",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"704-binary-search",children:"704 Binary Search"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://leetcode.com/problems/binary-search/",children:"LeetCode"})}),"\n",(0,i.jsx)(t.p,{children:"Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1."}),"\n",(0,i.jsx)(t.p,{children:"You must write an algorithm with O(log n) runtime complexity."}),"\n",(0,i.jsx)(t.p,{children:"Example 1:"}),"\n",(0,i.jsxs)(t.p,{children:["Input: nums = [-1,0,3,5,9,12], target = 9",(0,i.jsx)(t.br,{}),"\n","Output: 4",(0,i.jsx)(t.br,{}),"\n","Explanation: 9 exists in nums and its index is 4"]}),"\n",(0,i.jsx)(t.p,{children:"Example 2:"}),"\n",(0,i.jsxs)(t.p,{children:["Input: nums = [-1,0,3,5,9,12], target = 2",(0,i.jsx)(t.br,{}),"\n","Output: -1",(0,i.jsx)(t.br,{}),"\n","Explanation: 2 does not exist in nums so return -1"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.p,{children:"\u6700\u6700\u666e\u901a\u7684\u4e8c\u5206\u67e5\u627e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 o(log n) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 o(1)"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"public int search(int[] nums, int target) {\n    int left=0, right=nums.length-1;\n    int mid, t;\n    while(left<=right){\n        mid = (left+right)/2;\n        t = nums[mid];\n        if(t<target){\n            left = mid + 1;\n        } else if (t>target){\n            right = mid - 1;\n        } else {\n            return mid;\n        }\n    }\n    return -1;\n}\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);